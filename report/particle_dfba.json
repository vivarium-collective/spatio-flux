{
    "state": {
        "particles": {
            "nuDRKACkSPyoesrPnu2_YQ": {
                "id": "nuDRKACkSPyoesrPnu2_YQ",
                "position": [
                    "3.605424505710456",
                    "3.9979877740769476"
                ],
                "mass": "0.5327266883873675",
                "local": {
                    "glucose": "7.388760909821976",
                    "acetate": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0"
                },
                "dFBA": {
                    "inputs": {
                        "substrates": [
                            "local"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "outputs": {
                        "substrates": [
                            "exchange"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:DynamicFBA",
                    "config": {
                        "model_file": "textbook",
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "1.0"
                            ],
                            "acetate": [
                                "0.5",
                                "2.0"
                            ]
                        },
                        "substrate_update_reactions": {
                            "glucose": "EX_glc__D_e",
                            "acetate": "EX_ac_e"
                        },
                        "bounds": {
                            "EX_o2_e": {
                                "lower": "-2.0",
                                "upper": "!nil"
                            },
                            "ATPM": {
                                "lower": "1.0",
                                "upper": "1.0"
                            }
                        }
                    },
                    "shared": {}
                }
            },
            "Pug6jJ_XS-6_ESFfEqhByA": {
                "id": "Pug6jJ_XS-6_ESFfEqhByA",
                "position": [
                    "2.960401366880226",
                    "1.6024438718273082"
                ],
                "mass": "0.8822887959477301",
                "local": {
                    "glucose": "8.750430461317865",
                    "acetate": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0"
                },
                "dFBA": {
                    "inputs": {
                        "substrates": [
                            "local"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "outputs": {
                        "substrates": [
                            "exchange"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:DynamicFBA",
                    "config": {
                        "model_file": "textbook",
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "1.0"
                            ],
                            "acetate": [
                                "0.5",
                                "2.0"
                            ]
                        },
                        "substrate_update_reactions": {
                            "glucose": "EX_glc__D_e",
                            "acetate": "EX_ac_e"
                        },
                        "bounds": {
                            "EX_o2_e": {
                                "lower": "-2.0",
                                "upper": "!nil"
                            },
                            "ATPM": {
                                "lower": "1.0",
                                "upper": "1.0"
                            }
                        }
                    },
                    "shared": {}
                }
            }
        },
        "global_time": "0.0",
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "5",
                    "10"
                ],
                "bounds": [
                    "5.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ]
                }
            },
            "shared": null
        },
        "particle_movement": {
            "inputs": {
                "particles": [
                    "particles"
                ],
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "particles": [
                    "particles"
                ],
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:Particles",
            "config": {
                "bounds": [
                    "5.0",
                    "10.0"
                ],
                "n_bins": [
                    "5",
                    "10"
                ],
                "diffusion_rate": "0.1",
                "advection_rate": [
                    "0.0",
                    "-0.1"
                ],
                "add_probability": "0.4",
                "boundary_to_add": [
                    "top",
                    "left",
                    "right"
                ],
                "boundary_to_remove": [
                    "top",
                    "left",
                    "right"
                ]
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "fields": {
            "glucose": {
                "list": [
                    [
                        3.7596766256747416,
                        6.79833003111779,
                        8.120676044662593,
                        7.857756648182386,
                        3.0721427843759317,
                        8.204524946778399,
                        2.6358054013121435,
                        5.941130106260659,
                        6.8121909662531985,
                        1.7793276732863328
                    ],
                    [
                        4.9447635733967665,
                        5.954016166528027,
                        9.6949061668156,
                        8.451975965759301,
                        1.1015038720743435,
                        9.904694349529015,
                        6.31195125487157,
                        8.614746638700872,
                        9.722501106790395,
                        5.209983197521728
                    ],
                    [
                        5.330328820364683,
                        8.750430461317865,
                        7.283543140135566,
                        9.368091583503238,
                        9.810460287806004,
                        9.567160347769882,
                        4.886741764106698,
                        7.890617596797619,
                        6.962055894609216,
                        4.67058695821993
                    ],
                    [
                        6.237200749816404,
                        7.602647467772217,
                        9.428256848407655,
                        7.388760909821976,
                        9.991968970660098,
                        4.3071371484882235,
                        2.3913702243244246,
                        9.867883540363955,
                        3.7460237420055176,
                        7.670201840862744
                    ],
                    [
                        3.8411876222299464,
                        5.15117111862903,
                        7.01500472832655,
                        2.681329523938694,
                        4.404750702068567,
                        1.997321811998732,
                        3.3477985687277556,
                        7.511396431995624,
                        5.631805597458826,
                        1.198556867380585
                    ]
                ],
                "data": "float",
                "shape": [
                    5,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    5,
                    10
                ]
            }
        }
    },
    "composition": {
        "particles": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_value": {
                "id": {
                    "_type": "string",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer"
                },
                "position": {
                    "_type": "tuple",
                    "_default": "default_tuple",
                    "_apply": "apply_tuple",
                    "_check": "check_tuple",
                    "_slice": "slice_tuple",
                    "_serialize": "serialize_tuple",
                    "_deserialize": "deserialize_tuple",
                    "_dataclass": "dataclass_tuple",
                    "_fold": "fold_tuple",
                    "_divide": "divide_tuple",
                    "_bind": "bind_tuple",
                    "_description": "tuple of an ordered set of typed values",
                    "_type_parameters": [
                        "0",
                        "1"
                    ],
                    "_0": "float",
                    "_1": "float"
                },
                "mass": {
                    "_type": "positive_float",
                    "_check": "check_float",
                    "_apply": "apply_non_negative",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": 0.0,
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "local": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_graphviz": "graphviz_map",
                    "_value": {
                        "_type": "positive_float",
                        "_check": "check_float",
                        "_apply": "apply_non_negative",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": 0.0,
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "float"
                        ]
                    }
                },
                "exchange": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_graphviz": "graphviz_map",
                    "_value": {
                        "_type": "float",
                        "_check": "check_float",
                        "_apply": "accumulate",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": 0.0,
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "number"
                        ]
                    }
                },
                "_type": "particle",
                "dFBA": {
                    "_type": "process",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_process",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_inputs": {
                        "substrates": "map[positive_float]",
                        "biomass": "positive_float"
                    },
                    "_outputs": {
                        "substrates": "map[float]",
                        "biomass": "float"
                    },
                    "_description": "",
                    "inputs": {
                        "_type": "tree[wires]",
                        "_default": {
                            "substrates": [
                                "local"
                            ],
                            "biomass": [
                                "mass"
                            ]
                        },
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "tree[wires]",
                        "_default": {
                            "substrates": [
                                "exchange"
                            ],
                            "biomass": [
                                "mass"
                            ]
                        },
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "interval": {
                        "_type": "interval",
                        "_check": "check_float",
                        "_apply": "set",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": "1.0",
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "float"
                        ]
                    },
                    "address": {
                        "_type": "string",
                        "_default": "local:DynamicFBA",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": {
                            "model_file": "textbook",
                            "kinetic_params": {
                                "glucose": [
                                    0.5,
                                    1.0
                                ],
                                "acetate": [
                                    0.5,
                                    2.0
                                ]
                            },
                            "substrate_update_reactions": {
                                "glucose": "EX_glc__D_e",
                                "acetate": "EX_ac_e"
                            },
                            "bounds": {
                                "EX_o2_e": {
                                    "lower": -2.0,
                                    "upper": null
                                },
                                "ATPM": {
                                    "lower": 1.0,
                                    "upper": 1.0
                                }
                            }
                        },
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    },
                    "shared": {
                        "_type": "map",
                        "_default": {},
                        "_generate": "generate_map",
                        "_apply": "apply_map",
                        "_serialize": "serialize_map",
                        "_deserialize": "deserialize_map",
                        "_resolve": "resolve_map",
                        "_dataclass": "dataclass_map",
                        "_check": "check_map",
                        "_slice": "slice_map",
                        "_fold": "fold_map",
                        "_divide": "divide_map",
                        "_sort": "sort_map",
                        "_type_parameters": [
                            "value"
                        ],
                        "_description": "flat mapping from keys of strings to values of any type",
                        "_graphviz": "graphviz_map",
                        "_value": {
                            "_type": "step",
                            "_default": "default_edge",
                            "_generate": "generate_edge",
                            "_apply": "apply_process",
                            "_serialize": "serialize_process",
                            "_deserialize": "deserialize_step",
                            "_dataclass": "dataclass_edge",
                            "_check": "check_process",
                            "_slice": "slice_edge",
                            "_type_parameters": [
                                "inputs",
                                "outputs"
                            ],
                            "_description": "",
                            "inputs": {
                                "_type": "wires",
                                "_default": "default_tree",
                                "_generate": "generate_tree",
                                "_check": "check_tree",
                                "_slice": "slice_tree",
                                "_apply": "apply_tree",
                                "_serialize": "serialize_tree",
                                "_deserialize": "deserialize_tree",
                                "_dataclass": "dataclass_tree",
                                "_fold": "fold_tree",
                                "_divide": "divide_tree",
                                "_resolve": "resolve_tree",
                                "_type_parameters": [
                                    "leaf"
                                ],
                                "_description": "mapping from str to some type in a potentially nested form",
                                "_leaf": {
                                    "_type": "path",
                                    "_default": [],
                                    "_check": "check_list",
                                    "_slice": "slice_list",
                                    "_apply": "apply_path",
                                    "_serialize": "serialize_list",
                                    "_deserialize": "deserialize_list",
                                    "_dataclass": "dataclass_list",
                                    "_fold": "fold_list",
                                    "_divide": "divide_list",
                                    "_type_parameters": [
                                        "element"
                                    ],
                                    "_description": "general list type (or sublists)",
                                    "_element": {
                                        "_type": "mark",
                                        "_apply": "apply_mark",
                                        "_check": "check_mark",
                                        "_deserialize": "deserialize_mark",
                                        "_resolve": "resolve_mark"
                                    },
                                    "_inherit": [
                                        "list[mark]"
                                    ]
                                },
                                "_inherit": [
                                    "tree[path]"
                                ]
                            },
                            "outputs": {
                                "_type": "wires",
                                "_default": "default_tree",
                                "_generate": "generate_tree",
                                "_check": "check_tree",
                                "_slice": "slice_tree",
                                "_apply": "apply_tree",
                                "_serialize": "serialize_tree",
                                "_deserialize": "deserialize_tree",
                                "_dataclass": "dataclass_tree",
                                "_fold": "fold_tree",
                                "_divide": "divide_tree",
                                "_resolve": "resolve_tree",
                                "_type_parameters": [
                                    "leaf"
                                ],
                                "_description": "mapping from str to some type in a potentially nested form",
                                "_leaf": {
                                    "_type": "path",
                                    "_default": [],
                                    "_check": "check_list",
                                    "_slice": "slice_list",
                                    "_apply": "apply_path",
                                    "_serialize": "serialize_list",
                                    "_deserialize": "deserialize_list",
                                    "_dataclass": "dataclass_list",
                                    "_fold": "fold_list",
                                    "_divide": "divide_list",
                                    "_type_parameters": [
                                        "element"
                                    ],
                                    "_description": "general list type (or sublists)",
                                    "_element": {
                                        "_type": "mark",
                                        "_apply": "apply_mark",
                                        "_check": "check_mark",
                                        "_deserialize": "deserialize_mark",
                                        "_resolve": "resolve_mark"
                                    },
                                    "_inherit": [
                                        "list[mark]"
                                    ]
                                },
                                "_inherit": [
                                    "tree[path]"
                                ]
                            },
                            "_graphviz": "graphviz_edge",
                            "_inherit": [
                                "edge"
                            ],
                            "_fold": "fold_visit",
                            "_divide": "divide_process",
                            "address": {
                                "_type": "protocol",
                                "_default": "",
                                "_check": "check_string",
                                "_apply": "replace",
                                "_serialize": "serialize_string",
                                "_deserialize": "deserialize_string",
                                "_dataclass": "dataclass_string",
                                "_description": "64-bit integer",
                                "_inherit": [
                                    "string"
                                ]
                            },
                            "config": {
                                "_type": "quote",
                                "_deserialize": "deserialize_quote",
                                "_default": "default_quote",
                                "_generate": "generate_quote",
                                "_sort": "sort_quote",
                                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                                "_graphviz": "graphviz_none"
                            }
                        }
                    }
                }
            },
            "_description": "flat mapping from keys of strings to values of any type",
            "_graphviz": "graphviz_map"
        },
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_graphviz": "graphviz_map",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particle_movement": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "particles": "map[particle]",
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "particles": "map[particle]",
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_graphviz": "graphviz_map",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_graphviz": "graphviz_map",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    5,
                    10
                ],
                "_data": "positive_float"
            }
        }
    }
}