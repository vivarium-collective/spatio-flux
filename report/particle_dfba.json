{
    "state": {
        "particles": {
            "IdJI97V5SsWyTdDoBzPJsA": {
                "id": "IdJI97V5SsWyTdDoBzPJsA",
                "position": [
                    "5.559930086507773",
                    "1.9349800435935482"
                ],
                "size": "0.0",
                "mass": "0.3161448131657475",
                "local": {
                    "glucose": "7.727557066027457",
                    "acetate": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0"
                },
                "dFBA": {
                    "inputs": {
                        "substrates": [
                            "local"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "outputs": {
                        "substrates": [
                            "exchange"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:DynamicFBA",
                    "config": {
                        "model_file": "textbook",
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "1.0"
                            ],
                            "acetate": [
                                "0.5",
                                "2.0"
                            ]
                        },
                        "substrate_update_reactions": {
                            "glucose": "EX_glc__D_e",
                            "acetate": "EX_ac_e"
                        },
                        "bounds": {
                            "EX_o2_e": {
                                "lower": "-2.0",
                                "upper": "!nil"
                            },
                            "ATPM": {
                                "lower": "1.0",
                                "upper": "1.0"
                            }
                        }
                    },
                    "shared": {}
                }
            },
            "Z-3cpATbRquhhhtusyVpqQ": {
                "id": "Z-3cpATbRquhhhtusyVpqQ",
                "position": [
                    "5.079305570705374",
                    "2.7691716814198086"
                ],
                "size": "0.0",
                "mass": "0.5419395119489239",
                "local": {
                    "glucose": "3.04963043406251",
                    "acetate": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0"
                },
                "dFBA": {
                    "inputs": {
                        "substrates": [
                            "local"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "outputs": {
                        "substrates": [
                            "exchange"
                        ],
                        "biomass": [
                            "mass"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:DynamicFBA",
                    "config": {
                        "model_file": "textbook",
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "1.0"
                            ],
                            "acetate": [
                                "0.5",
                                "2.0"
                            ]
                        },
                        "substrate_update_reactions": {
                            "glucose": "EX_glc__D_e",
                            "acetate": "EX_ac_e"
                        },
                        "bounds": {
                            "EX_o2_e": {
                                "lower": "-2.0",
                                "upper": "!nil"
                            },
                            "ATPM": {
                                "lower": "1.0",
                                "upper": "1.0"
                            }
                        }
                    },
                    "shared": {}
                }
            }
        },
        "global_time": "0.0",
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "10"
                ],
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ]
                }
            },
            "shared": null
        },
        "particle_movement": {
            "inputs": {
                "particles": [
                    "particles"
                ],
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "particles": [
                    "particles"
                ],
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:Particles",
            "config": {
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "n_bins": [
                    "10",
                    "10"
                ],
                "diffusion_rate": "0.1",
                "advection_rate": [
                    "0.0",
                    "0.0"
                ],
                "add_probability": "0.3",
                "boundary_to_add": [
                    "top",
                    "bottom",
                    "left",
                    "right"
                ],
                "boundary_to_remove": [
                    "top",
                    "bottom",
                    "left",
                    "right"
                ]
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "fields": {
            "glucose": {
                "list": [
                    [
                        1.296420611523899,
                        1.673252714536137,
                        2.831816905809966,
                        4.86555597680378,
                        2.1031752569471553,
                        4.902695437296471,
                        4.921781968028875,
                        8.341886247737332,
                        6.55735476562548,
                        3.5104312638397532
                    ],
                    [
                        3.8199850087795904,
                        9.175773493174267,
                        7.798283145427703,
                        1.8252045317965133,
                        5.732444194305128,
                        8.146023612797629,
                        2.928928666424871,
                        4.690890497080659,
                        4.891948543403153,
                        9.732380553840255
                    ],
                    [
                        2.4042797691035322,
                        1.0642197036522778,
                        2.8237136132910994,
                        2.254105236603904,
                        6.638929863228899,
                        9.770238750686936,
                        1.6920001063354075,
                        9.260252585737772,
                        4.195829113790872,
                        4.719171043094061
                    ],
                    [
                        4.4112325532588486,
                        1.3529976535497523,
                        5.955865513181382,
                        1.0797369822958223,
                        3.7339928932926005,
                        5.524304110262577,
                        6.186842168236764,
                        2.3849087567781386,
                        4.144228340587316,
                        7.771843428999558
                    ],
                    [
                        7.676865949484341,
                        7.213546912577399,
                        2.7587050993800473,
                        8.31800607158246,
                        9.646122974190764,
                        5.5161905012369195,
                        2.3490968847944527,
                        3.057011589388897,
                        1.8838344924260388,
                        2.0712497380695654
                    ],
                    [
                        2.3161454923373483,
                        7.727557066027457,
                        3.04963043406251,
                        1.3058750103860746,
                        6.9325399939473265,
                        3.7867952879261804,
                        4.220964152058751,
                        5.274373993843072,
                        6.742618338029791,
                        8.174028722796283
                    ],
                    [
                        5.6134491096480685,
                        2.85430614225676,
                        2.9480862476454264,
                        7.763032844304469,
                        9.341035912543274,
                        9.154802330004376,
                        4.578425985415869,
                        2.5224390493238857,
                        9.108095184457538,
                        7.237738037570084
                    ],
                    [
                        4.987392757562038,
                        7.173574882995097,
                        3.0268841271755176,
                        7.625318709464114,
                        6.845370739203387,
                        5.720164255809534,
                        8.712296352430254,
                        9.888310262224655,
                        6.3835274202809185,
                        3.4618424789755116
                    ],
                    [
                        1.6060603486777802,
                        2.2467315218733206,
                        3.41486382559847,
                        9.389355006946252,
                        8.999046307913959,
                        3.5064781058962198,
                        4.7554247122050315,
                        9.43855125826363,
                        3.493368858711029,
                        1.3703298423723442
                    ],
                    [
                        7.273223988045472,
                        3.8377380888257866,
                        5.608141495059223,
                        6.83155017005854,
                        1.4585008164692712,
                        6.237775865661264,
                        1.068581184376094,
                        3.6917347709192416,
                        9.760549522040456,
                        3.890251351696705
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            }
        }
    },
    "composition": {
        "particles": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_value": {
                "id": {
                    "_type": "string",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer"
                },
                "position": {
                    "_type": "tuple",
                    "_default": "default_tuple",
                    "_apply": "apply_tuple",
                    "_check": "check_tuple",
                    "_slice": "slice_tuple",
                    "_serialize": "serialize_tuple",
                    "_deserialize": "deserialize_tuple",
                    "_dataclass": "dataclass_tuple",
                    "_fold": "fold_tuple",
                    "_divide": "divide_tuple",
                    "_bind": "bind_tuple",
                    "_description": "tuple of an ordered set of typed values",
                    "_type_parameters": [
                        "0",
                        "1"
                    ],
                    "_0": "float",
                    "_1": "float"
                },
                "size": {
                    "_type": "float",
                    "_check": "check_float",
                    "_apply": "accumulate",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": 0.0,
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "number"
                    ]
                },
                "mass": {
                    "_type": "positive_float",
                    "_check": "check_float",
                    "_apply": "apply_non_negative",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": 0.0,
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "local": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "positive_float",
                        "_check": "check_float",
                        "_apply": "apply_non_negative",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": 0.0,
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "float"
                        ]
                    }
                },
                "exchange": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "float",
                        "_check": "check_float",
                        "_apply": "accumulate",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": 0.0,
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "number"
                        ]
                    }
                },
                "_type": "particle",
                "dFBA": {
                    "_type": "process",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_process",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_inputs": {
                        "substrates": "map[positive_float]",
                        "biomass": "positive_float"
                    },
                    "_outputs": {
                        "substrates": "map[float]",
                        "biomass": "float"
                    },
                    "_description": "",
                    "inputs": {
                        "_type": "tree[wires]",
                        "_default": {
                            "substrates": [
                                "local"
                            ],
                            "biomass": [
                                "mass"
                            ]
                        },
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "tree[wires]",
                        "_default": {
                            "substrates": [
                                "exchange"
                            ],
                            "biomass": [
                                "mass"
                            ]
                        },
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "interval": {
                        "_type": "interval",
                        "_check": "check_float",
                        "_apply": "set",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": "1.0",
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "float"
                        ]
                    },
                    "address": {
                        "_type": "string",
                        "_default": "local:DynamicFBA",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": {
                            "model_file": "textbook",
                            "kinetic_params": {
                                "glucose": [
                                    0.5,
                                    1.0
                                ],
                                "acetate": [
                                    0.5,
                                    2.0
                                ]
                            },
                            "substrate_update_reactions": {
                                "glucose": "EX_glc__D_e",
                                "acetate": "EX_ac_e"
                            },
                            "biomass_identifier": "biomass",
                            "bounds": {
                                "EX_o2_e": {
                                    "lower": -2.0,
                                    "upper": null
                                },
                                "ATPM": {
                                    "lower": 1.0,
                                    "upper": 1.0
                                }
                            }
                        },
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    },
                    "shared": {
                        "_type": "map",
                        "_default": {},
                        "_generate": "generate_map",
                        "_apply": "apply_map",
                        "_serialize": "serialize_map",
                        "_deserialize": "deserialize_map",
                        "_resolve": "resolve_map",
                        "_dataclass": "dataclass_map",
                        "_check": "check_map",
                        "_slice": "slice_map",
                        "_fold": "fold_map",
                        "_divide": "divide_map",
                        "_sort": "sort_map",
                        "_type_parameters": [
                            "value"
                        ],
                        "_description": "flat mapping from keys of strings to values of any type",
                        "_value": {
                            "_type": "step",
                            "_default": "default_edge",
                            "_generate": "generate_edge",
                            "_apply": "apply_process",
                            "_serialize": "serialize_process",
                            "_deserialize": "deserialize_step",
                            "_dataclass": "dataclass_edge",
                            "_check": "check_process",
                            "_slice": "slice_edge",
                            "_type_parameters": [
                                "inputs",
                                "outputs"
                            ],
                            "_description": "",
                            "inputs": {
                                "_type": "wires",
                                "_default": "default_tree",
                                "_generate": "generate_tree",
                                "_check": "check_tree",
                                "_slice": "slice_tree",
                                "_apply": "apply_tree",
                                "_serialize": "serialize_tree",
                                "_deserialize": "deserialize_tree",
                                "_dataclass": "dataclass_tree",
                                "_fold": "fold_tree",
                                "_divide": "divide_tree",
                                "_resolve": "resolve_tree",
                                "_type_parameters": [
                                    "leaf"
                                ],
                                "_description": "mapping from str to some type in a potentially nested form",
                                "_leaf": {
                                    "_type": "path",
                                    "_default": [],
                                    "_check": "check_list",
                                    "_slice": "slice_list",
                                    "_apply": "apply_path",
                                    "_serialize": "serialize_list",
                                    "_deserialize": "deserialize_list",
                                    "_dataclass": "dataclass_list",
                                    "_fold": "fold_list",
                                    "_divide": "divide_list",
                                    "_type_parameters": [
                                        "element"
                                    ],
                                    "_description": "general list type (or sublists)",
                                    "_element": {
                                        "_type": "mark",
                                        "_apply": "apply_mark",
                                        "_check": "check_mark",
                                        "_deserialize": "deserialize_mark",
                                        "_resolve": "resolve_mark"
                                    },
                                    "_inherit": [
                                        "list[mark]"
                                    ]
                                },
                                "_inherit": [
                                    "tree[path]"
                                ]
                            },
                            "outputs": {
                                "_type": "wires",
                                "_default": "default_tree",
                                "_generate": "generate_tree",
                                "_check": "check_tree",
                                "_slice": "slice_tree",
                                "_apply": "apply_tree",
                                "_serialize": "serialize_tree",
                                "_deserialize": "deserialize_tree",
                                "_dataclass": "dataclass_tree",
                                "_fold": "fold_tree",
                                "_divide": "divide_tree",
                                "_resolve": "resolve_tree",
                                "_type_parameters": [
                                    "leaf"
                                ],
                                "_description": "mapping from str to some type in a potentially nested form",
                                "_leaf": {
                                    "_type": "path",
                                    "_default": [],
                                    "_check": "check_list",
                                    "_slice": "slice_list",
                                    "_apply": "apply_path",
                                    "_serialize": "serialize_list",
                                    "_deserialize": "deserialize_list",
                                    "_dataclass": "dataclass_list",
                                    "_fold": "fold_list",
                                    "_divide": "divide_list",
                                    "_type_parameters": [
                                        "element"
                                    ],
                                    "_description": "general list type (or sublists)",
                                    "_element": {
                                        "_type": "mark",
                                        "_apply": "apply_mark",
                                        "_check": "check_mark",
                                        "_deserialize": "deserialize_mark",
                                        "_resolve": "resolve_mark"
                                    },
                                    "_inherit": [
                                        "list[mark]"
                                    ]
                                },
                                "_inherit": [
                                    "tree[path]"
                                ]
                            },
                            "_graphviz": "graphviz_edge",
                            "_inherit": [
                                "edge"
                            ],
                            "_fold": "fold_visit",
                            "_divide": "divide_process",
                            "address": {
                                "_type": "protocol",
                                "_default": "",
                                "_check": "check_string",
                                "_apply": "replace",
                                "_serialize": "serialize_string",
                                "_deserialize": "deserialize_string",
                                "_dataclass": "dataclass_string",
                                "_description": "64-bit integer",
                                "_inherit": [
                                    "string"
                                ]
                            },
                            "config": {
                                "_type": "quote",
                                "_deserialize": "deserialize_quote",
                                "_default": "default_quote",
                                "_generate": "generate_quote",
                                "_sort": "sort_quote",
                                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                                "_graphviz": "graphviz_none"
                            }
                        }
                    }
                }
            },
            "_description": "flat mapping from keys of strings to values of any type"
        },
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particle_movement": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "particles": "map[particle]",
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "particles": "map[particle]",
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    10
                ],
                "_data": "positive_float"
            }
        }
    }
}