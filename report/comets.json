{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.0017046804242587532,
                        0.07301865962734944,
                        0.03999154186671629,
                        0.01647956525972506,
                        0.006452214970904902,
                        0.09121782215139013,
                        0.07738763262807567,
                        0.0025015574045873846,
                        0.07259796643917199,
                        0.04029928425619777
                    ],
                    [
                        0.07411233890464522,
                        0.033739107091151146,
                        0.04338976084714487,
                        0.038045609275814234,
                        0.07797015471683005,
                        0.05127708079027996,
                        0.014197441738185414,
                        0.07100249645929062,
                        0.03514460248530622,
                        0.03368561745582258
                    ],
                    [
                        0.052035845013600736,
                        0.048238989806348845,
                        0.06555937514374119,
                        0.0002506352325104877,
                        0.009664809958696109,
                        0.06851352862146193,
                        0.09653734249591821,
                        0.037824609599507765,
                        0.031139661935844012,
                        0.009459023167366343
                    ],
                    [
                        0.004019725594317148,
                        0.021654342054338915,
                        0.008143783820957274,
                        0.04111903200597644,
                        0.05276719948398048,
                        0.012814985499500265,
                        0.024096739998920903,
                        0.07323997069370086,
                        0.08864470172220634,
                        0.005225279879151179
                    ],
                    [
                        0.09477536146366888,
                        0.07644885376245747,
                        0.024342070910029403,
                        0.016634352831199305,
                        0.023324660593966443,
                        0.06839221563645219,
                        0.06108526893620411,
                        0.06430749159530416,
                        0.04975046860259933,
                        0.0246823139553651
                    ],
                    [
                        0.00600196365289355,
                        0.03181015890897444,
                        0.06903477557888543,
                        0.0017041404119480632,
                        0.02080546576932506,
                        0.042892334534461035,
                        0.08531832545413287,
                        0.057931426659409674,
                        0.048818721745256644,
                        0.003559018456841168
                    ],
                    [
                        0.0831411329437983,
                        0.04347720445598228,
                        0.096818379660337,
                        0.07724096365848512,
                        0.09263493677578226,
                        0.09978711679085399,
                        0.021468365211621133,
                        0.037562009569621004,
                        0.03476837290357796,
                        0.018533550614819105
                    ],
                    [
                        0.06436194272590519,
                        0.04602023083937479,
                        0.06266971372361695,
                        0.08583247967647371,
                        0.0020838343553840955,
                        0.018464699760630223,
                        0.07578422805548424,
                        0.09321891658773182,
                        0.0736584166621871,
                        0.034606058767479256
                    ],
                    [
                        0.047065272224835364,
                        0.07735759162003741,
                        0.04877994440457892,
                        0.09596582103705267,
                        0.02425822912470952,
                        0.03420822071607093,
                        0.09239753192764567,
                        0.07784923074926264,
                        0.05780735767212241,
                        0.07694847175890651
                    ],
                    [
                        0.060533128211283954,
                        0.02899609311714494,
                        0.0916037403001597,
                        0.030983784823112284,
                        0.04117735894482896,
                        0.023787556101681775,
                        0.05839130778297072,
                        0.03707810507270017,
                        0.04535201728554966,
                        0.05970037307141425
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "10"
                ],
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    10
                ],
                "_data": "positive_float"
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}