{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.08006170667300117,
                        0.09137157947539969,
                        0.007029455319003797,
                        0.0728739754591994,
                        0.044263696763619846,
                        0.08253477611202326,
                        0.023081983644121354,
                        0.024776533647293666,
                        0.08167488840005198,
                        0.008538283709690665
                    ],
                    [
                        0.036831084288645156,
                        0.007322527835200144,
                        0.02932696663380842,
                        0.04743367222005288,
                        0.01913973708076019,
                        0.008200399999303798,
                        0.0899287829345843,
                        0.02884328708322628,
                        0.06496106597347985,
                        0.017349256570257966
                    ],
                    [
                        0.0795615642054938,
                        0.08584754060268049,
                        0.05989222787289496,
                        0.06199531791001589,
                        0.06848684485985804,
                        0.015904216880429922,
                        0.09881323141875345,
                        0.052351715950464894,
                        0.03600679924795378,
                        0.059732513971287794
                    ],
                    [
                        0.032405229877603414,
                        0.04611464960502812,
                        0.051653621611319735,
                        0.019443687288011158,
                        0.05281338760224946,
                        0.047861059666616995,
                        0.050688653173178694,
                        0.06795940094663756,
                        0.026131274714605968,
                        0.026903068875994085
                    ],
                    [
                        0.007098541045837026,
                        0.08939236901381592,
                        0.07900052624159347,
                        0.040960114702428746,
                        0.08348696028085506,
                        0.005215944852604882,
                        0.0428170689204674,
                        0.03277220548018104,
                        0.07244263941802735,
                        0.0835052937598163
                    ],
                    [
                        0.05986949197758773,
                        0.08096546522314635,
                        0.03592461831206685,
                        0.056869752813229896,
                        0.07853728788800236,
                        0.007746168720130175,
                        0.07257375619974574,
                        0.005369927624120263,
                        0.08757925761077423,
                        0.053799537096887944
                    ],
                    [
                        0.032119638687199525,
                        0.0180030865163772,
                        0.05205810583471635,
                        0.007593466276579553,
                        0.06000840305740476,
                        0.07596144924192613,
                        0.04983592468080003,
                        0.07561413915029142,
                        0.08490906702088791,
                        0.0878496390098896
                    ],
                    [
                        0.03742991715723023,
                        0.05866018453918002,
                        0.011741508590383554,
                        0.018293165910228282,
                        0.0930278034535989,
                        0.07893511669092432,
                        0.07626911063917713,
                        0.03991427292928038,
                        0.05407387503222405,
                        0.013243245674772986
                    ],
                    [
                        0.09471518989816188,
                        0.06611788078111891,
                        0.010285006843459277,
                        0.005634780655553207,
                        0.04812060583175966,
                        0.08196327941667904,
                        0.04724827000260565,
                        0.07506192400275767,
                        0.026024372837508115,
                        0.025434539810026514
                    ],
                    [
                        0.06277183387150104,
                        0.0025345647430341624,
                        0.08792263809672592,
                        0.05254306070638374,
                        0.0619240323360337,
                        0.06413229166677864,
                        0.04688822822516121,
                        0.02646318407110583,
                        0.009686329593582833,
                        0.07126916849192293
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "10"
                ],
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    10
                ],
                "_data": "positive_float"
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}