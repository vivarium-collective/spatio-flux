{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        8.0557146835936,
                        13.768746408407608,
                        0.04503779840407951,
                        6.739592059575978,
                        7.445595355837076
                    ],
                    [
                        11.089656945736186,
                        11.164889652514589,
                        17.091090962586843,
                        0.9485962592928554,
                        0.959915774890745
                    ],
                    [
                        2.3620365171739666,
                        3.094024128247843,
                        6.6408778324182,
                        13.850721740488183,
                        5.788193586511856
                    ],
                    [
                        4.913061755097523,
                        9.297234051391115,
                        15.896084442346844,
                        5.1881194444226715,
                        16.736928497254915
                    ],
                    [
                        13.10860103878542,
                        4.501287960623374,
                        6.105425257692881,
                        13.814674827823076,
                        2.669219505544853
                    ],
                    [
                        12.12180589505585,
                        4.871026444081917,
                        2.0691363284466924,
                        19.26062355041722,
                        14.134159213237705
                    ],
                    [
                        18.479291603264553,
                        15.746397879795557,
                        4.101678713983301,
                        8.445761989558997,
                        18.774553098651353
                    ],
                    [
                        2.0884021755652427,
                        3.458555666671026,
                        19.156297623999343,
                        19.187947122177608,
                        5.728919104410293
                    ],
                    [
                        15.752559464419843,
                        1.976677562399829,
                        8.268709115562407,
                        14.112988992590822,
                        14.06336156919224
                    ],
                    [
                        4.080294227684393,
                        12.423683508437655,
                        19.570839058394334,
                        16.089362797796078,
                        1.58499576964235
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    5
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    5
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.025761351120939215,
                        0.03548157540110432,
                        0.0870136084233738,
                        0.058239425666138316,
                        0.09206685889215811
                    ],
                    [
                        0.05514174445113478,
                        0.07843761549367305,
                        0.08823815424579108,
                        0.08976173002621804,
                        0.06991671831036662
                    ],
                    [
                        0.06798883300846158,
                        0.06165083871405071,
                        0.034986879807206515,
                        0.08719949242507136,
                        0.027196546072648365
                    ],
                    [
                        0.07240785968252125,
                        0.04053762640815567,
                        0.023252588300701205,
                        0.058933389983401634,
                        0.03107413232933808
                    ],
                    [
                        0.01473501197663394,
                        0.005740589592332224,
                        0.007899948443774585,
                        0.09889953030985589,
                        0.053979876050961134
                    ],
                    [
                        0.08262017649160608,
                        0.09650693614215694,
                        0.09415083957988811,
                        0.07012329531133514,
                        0.06172172152744579
                    ],
                    [
                        0.030474010013560704,
                        0.03882208884702465,
                        0.09757346444044719,
                        0.028546420451432044,
                        0.045461809074036845
                    ],
                    [
                        0.04540996054914416,
                        0.05646553702113926,
                        0.05412269976962484,
                        0.014257668671856339,
                        0.0955313020024467
                    ],
                    [
                        0.05189525860165072,
                        0.006556505186969697,
                        0.06301743504730829,
                        0.05287885564172478,
                        0.006034984042437086
                    ],
                    [
                        0.09259573194781943,
                        0.00647884896500267,
                        0.04560842082635574,
                        0.07193945466941676,
                        0.053556082339883695
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    5
                ]
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[5,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            5,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            5,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        5,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[6,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            6,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            6,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        6,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[7,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            7,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            7,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        7,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[8,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            8,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            8,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        8,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[9,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            9,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            9,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        9,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            }
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_shape": [
                    10,
                    5
                ],
                "_data": "positive_float"
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[5,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[6,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[7,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[8,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[9,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}