{
    "state": {
        "particles": {
            "bqAWi6AWQs-iKnLWbsr7gg": {
                "id": "bqAWi6AWQs-iKnLWbsr7gg",
                "position": [
                    "3.0620599439861786",
                    "3.515482425535538"
                ],
                "size": "0.0",
                "mass": "0.7050286613672166",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.08484742118015366",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "iATr9P-JTpGCpyHf7RWzHg": {
                "id": "iATr9P-JTpGCpyHf7RWzHg",
                "position": [
                    "2.57957071219125",
                    "8.260123200408954"
                ],
                "size": "0.0",
                "mass": "0.6805392270842696",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.0028907566326281556",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "Iw1WBOcwSgKi-vrvv28Fzw": {
                "id": "Iw1WBOcwSgKi-vrvv28Fzw",
                "position": [
                    "4.432769357193742",
                    "0.35806511357936444"
                ],
                "size": "0.0",
                "mass": "0.8805035558411377",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.06796167131107378",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "aN-ZopVMRRqHfm9XuVJn7A": {
                "id": "aN-ZopVMRRqHfm9XuVJn7A",
                "position": [
                    "4.860228182392338",
                    "1.8686122312490905"
                ],
                "size": "0.0",
                "mass": "0.32627257384564073",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.05978877992121583",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "hBwQThJmTeqkcKAgj8UPbA": {
                "id": "hBwQThJmTeqkcKAgj8UPbA",
                "position": [
                    "1.5898905059110273",
                    "1.0726567793557196"
                ],
                "size": "0.0",
                "mass": "0.053417392248146914",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.024208299857471895",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "0o6UJAUlQTWzqnbmdS_y6g": {
                "id": "0o6UJAUlQTWzqnbmdS_y6g",
                "position": [
                    "0.25820202328493913",
                    "9.228126084041385"
                ],
                "size": "0.0",
                "mass": "0.572552937136265",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.05425856861808103",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "VSOPxjFvSXKzJDpT2vUs6w": {
                "id": "VSOPxjFvSXKzJDpT2vUs6w",
                "position": [
                    "1.1323379112824465",
                    "4.321534657353334"
                ],
                "size": "0.0",
                "mass": "0.05301667915659162",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.051836935687917265",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "8A09S7pCQMW6X3MFgdognA": {
                "id": "8A09S7pCQMW6X3MFgdognA",
                "position": [
                    "0.8613384118909218",
                    "9.675706487364598"
                ],
                "size": "0.0",
                "mass": "0.34909266237258646",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.05425856861808103",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "bpKz1uGoTRSRq8sHBH-3Xg": {
                "id": "bpKz1uGoTRSRq8sHBH-3Xg",
                "position": [
                    "3.6547612745315794",
                    "0.43270913176108095"
                ],
                "size": "0.0",
                "mass": "0.4607712613207763",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.007219686100266987",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            },
            "y6s7KAQOSh2cXPFtMgJk6w": {
                "id": "y6s7KAQOSh2cXPFtMgJk6w",
                "position": [
                    "3.591393498986491",
                    "4.8702058486073385"
                ],
                "size": "0.0",
                "mass": "0.14303466625140457",
                "local": {
                    "glucose": "10.0",
                    "acetate": "0.0",
                    "biomass": "0.09399531134804168",
                    "detritus": "0.0"
                },
                "exchange": {
                    "glucose": "0.0",
                    "acetate": "0.0",
                    "biomass": "0.0",
                    "detritus": "0.0"
                },
                "minimal_particle": {
                    "inputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "local"
                        ]
                    },
                    "outputs": {
                        "mass": [
                            "mass"
                        ],
                        "substrates": [
                            "exchange"
                        ]
                    },
                    "interval": 1.0,
                    "address": "local:MinimalParticle",
                    "config": {
                        "reactions": {
                            "grow": {
                                "reactant": "glucose",
                                "product": "mass"
                            },
                            "release": {
                                "reactant": "mass",
                                "product": "detritus"
                            }
                        },
                        "kinetic_params": {
                            "glucose": [
                                "0.5",
                                "0.01"
                            ],
                            "mass": [
                                "1.0",
                                "0.001"
                            ]
                        }
                    },
                    "shared": {}
                }
            }
        },
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ],
                    [
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0,
                        10.0
                    ]
                ],
                "data": "float",
                "shape": [
                    5,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    5,
                    10
                ]
            },
            "detritus": {
                "list": [
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ],
                    [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                    ]
                ],
                "data": "float",
                "shape": [
                    5,
                    10
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.009326903376619655,
                        0.07388932507051336,
                        0.0596365792579341,
                        0.02350504077215365,
                        0.014230170326050895,
                        0.05284265458013309,
                        0.08911666322448653,
                        0.026605025522427807,
                        0.06164044288683327,
                        0.06168201077143187
                    ],
                    [
                        0.008945677616110249,
                        0.05515235062020321,
                        0.057053787200412334,
                        0.09789263265130044,
                        0.06343275781698343,
                        0.040191156905128284,
                        0.09649956531719173,
                        0.09185844589163329,
                        0.05541687268096401,
                        0.028637367785273274
                    ],
                    [
                        0.06535564720925201,
                        0.013661339733700274,
                        0.01127682039242206,
                        0.02383449711810447,
                        0.050245938875201804,
                        0.0010097141166736324,
                        0.09978942788893681,
                        0.021604063308383083,
                        0.037272663750900006,
                        0.01991854635024669
                    ],
                    [
                        0.05989506325618826,
                        0.0382010666409742,
                        0.04953931695878734,
                        0.07742059088556937,
                        0.008702130613648407,
                        0.026541788333510077,
                        0.07705851845798169,
                        0.021665274362705524,
                        0.07974111174419296,
                        0.08611719613232383
                    ],
                    [
                        0.02182228199342632,
                        0.032098499076013885,
                        0.020406598171056767,
                        0.04396657108801342,
                        0.01099112924199277,
                        0.057780627306994826,
                        0.0373261687477787,
                        0.08551968941177884,
                        0.011212349840127735,
                        0.0568565802898755
                    ]
                ],
                "data": "float",
                "shape": [
                    5,
                    10
                ]
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[0,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            0,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            0,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            0,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        0,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[1,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            1,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            1,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            1,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        1,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[2,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            2,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            2,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            2,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        2,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[3,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            3,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            3,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            3,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        3,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,0]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            0
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            0
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            0
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        0
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,1]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            1
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            1
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            1
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        1
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,2]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            2
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            2
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            2
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        2
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,3]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            3
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            3
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            3
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        3
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,4]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            4
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            4
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            4
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        4
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,5]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        5
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            5
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            5
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            5
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        5
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,6]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        6
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            6
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            6
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            6
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        6
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,7]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        7
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            7
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            7
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            7
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        7
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,8]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        8
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            8
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            8
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            8
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        8
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            },
            "[4,9]": {
                "inputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        9
                    ]
                },
                "outputs": {
                    "substrates": {
                        "glucose": [
                            "..",
                            "fields",
                            "glucose",
                            4,
                            9
                        ],
                        "acetate": [
                            "..",
                            "fields",
                            "acetate",
                            4,
                            9
                        ],
                        "detritus": [
                            "..",
                            "fields",
                            "detritus",
                            4,
                            9
                        ]
                    },
                    "biomass": [
                        "..",
                        "fields",
                        "biomass",
                        4,
                        9
                    ]
                },
                "interval": 1.0,
                "address": "local:DynamicFBA",
                "config": {
                    "model_file": "textbook",
                    "kinetic_params": {
                        "glucose": [
                            "0.5",
                            "1.0"
                        ],
                        "acetate": [
                            "0.5",
                            "2.0"
                        ]
                    },
                    "substrate_update_reactions": {
                        "glucose": "EX_glc__D_e",
                        "acetate": "EX_ac_e"
                    },
                    "bounds": {
                        "EX_o2_e": {
                            "lower": "-2.0",
                            "upper": "!nil"
                        },
                        "ATPM": {
                            "lower": "1.0",
                            "upper": "1.0"
                        }
                    }
                },
                "shared": null
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "5",
                    "10"
                ],
                "bounds": [
                    "5.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "detritus": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "detritus": [
                        "0.0",
                        "0.0"
                    ]
                }
            },
            "shared": null
        },
        "particle_movement": {
            "inputs": {
                "particles": [
                    "particles"
                ],
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "particles": [
                    "particles"
                ],
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:Particles",
            "config": {
                "bounds": [
                    "5.0",
                    "10.0"
                ],
                "n_bins": [
                    "5",
                    "10"
                ],
                "diffusion_rate": "0.1",
                "advection_rate": [
                    "0.0",
                    "-0.1"
                ],
                "add_probability": "0.3",
                "boundary_to_add": [
                    "top"
                ],
                "boundary_to_remove": [
                    "top",
                    "bottom",
                    "left",
                    "right"
                ]
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        }
    },
    "composition": {
        "particles": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_value": {
                "id": {
                    "_type": "string",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer"
                },
                "position": {
                    "_type": "tuple",
                    "_default": "default_tuple",
                    "_apply": "apply_tuple",
                    "_check": "check_tuple",
                    "_slice": "slice_tuple",
                    "_serialize": "serialize_tuple",
                    "_deserialize": "deserialize_tuple",
                    "_dataclass": "dataclass_tuple",
                    "_fold": "fold_tuple",
                    "_divide": "divide_tuple",
                    "_bind": "bind_tuple",
                    "_description": "tuple of an ordered set of typed values",
                    "_type_parameters": [
                        "0",
                        "1"
                    ],
                    "_0": "float",
                    "_1": "float"
                },
                "size": {
                    "_type": "float",
                    "_check": "check_float",
                    "_apply": "accumulate",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": 0.0,
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "number"
                    ]
                },
                "mass": {
                    "_type": "float",
                    "_check": "check_float",
                    "_apply": "accumulate",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": 1.0,
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "number"
                    ]
                },
                "local": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "positive_float",
                        "_check": "check_float",
                        "_apply": "apply_non_negative",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": 0.0,
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "float"
                        ]
                    }
                },
                "exchange": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "float",
                        "_check": "check_float",
                        "_apply": "accumulate",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": 0.0,
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "number"
                        ]
                    }
                },
                "_type": "particle",
                "minimal_particle": {
                    "_type": "process",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_process",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "tree[wires]",
                        "_default": {
                            "mass": [
                                "mass"
                            ],
                            "substrates": [
                                "local"
                            ]
                        },
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "tree[wires]",
                        "_default": {
                            "mass": [
                                "mass"
                            ],
                            "substrates": [
                                "exchange"
                            ]
                        },
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "interval": {
                        "_type": "interval",
                        "_check": "check_float",
                        "_apply": "set",
                        "_serialize": "to_string",
                        "_description": "64-bit floating point precision number",
                        "_default": "1.0",
                        "_deserialize": "deserialize_float",
                        "_divide": "divide_float",
                        "_dataclass": "dataclass_float",
                        "_inherit": [
                            "float"
                        ]
                    },
                    "address": {
                        "_type": "string",
                        "_default": "local:MinimalParticle",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": {
                            "reactions": {
                                "grow": {
                                    "reactant": "glucose",
                                    "product": "mass"
                                },
                                "release": {
                                    "reactant": "mass",
                                    "product": "detritus"
                                }
                            },
                            "kinetic_params": {
                                "glucose": [
                                    0.5,
                                    0.01
                                ],
                                "mass": [
                                    1.0,
                                    0.001
                                ]
                            }
                        },
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    },
                    "shared": {
                        "_type": "map",
                        "_default": {},
                        "_generate": "generate_map",
                        "_apply": "apply_map",
                        "_serialize": "serialize_map",
                        "_deserialize": "deserialize_map",
                        "_resolve": "resolve_map",
                        "_dataclass": "dataclass_map",
                        "_check": "check_map",
                        "_slice": "slice_map",
                        "_fold": "fold_map",
                        "_divide": "divide_map",
                        "_sort": "sort_map",
                        "_type_parameters": [
                            "value"
                        ],
                        "_description": "flat mapping from keys of strings to values of any type",
                        "_value": {
                            "_type": "step",
                            "_default": "default_edge",
                            "_generate": "generate_edge",
                            "_apply": "apply_process",
                            "_serialize": "serialize_process",
                            "_deserialize": "deserialize_step",
                            "_dataclass": "dataclass_edge",
                            "_check": "check_process",
                            "_slice": "slice_edge",
                            "_type_parameters": [
                                "inputs",
                                "outputs"
                            ],
                            "_description": "",
                            "inputs": {
                                "_type": "wires",
                                "_default": "default_tree",
                                "_generate": "generate_tree",
                                "_check": "check_tree",
                                "_slice": "slice_tree",
                                "_apply": "apply_tree",
                                "_serialize": "serialize_tree",
                                "_deserialize": "deserialize_tree",
                                "_dataclass": "dataclass_tree",
                                "_fold": "fold_tree",
                                "_divide": "divide_tree",
                                "_resolve": "resolve_tree",
                                "_type_parameters": [
                                    "leaf"
                                ],
                                "_description": "mapping from str to some type in a potentially nested form",
                                "_leaf": {
                                    "_type": "path",
                                    "_default": [],
                                    "_check": "check_list",
                                    "_slice": "slice_list",
                                    "_apply": "apply_path",
                                    "_serialize": "serialize_list",
                                    "_deserialize": "deserialize_list",
                                    "_dataclass": "dataclass_list",
                                    "_fold": "fold_list",
                                    "_divide": "divide_list",
                                    "_type_parameters": [
                                        "element"
                                    ],
                                    "_description": "general list type (or sublists)",
                                    "_element": {
                                        "_type": "mark",
                                        "_apply": "apply_mark",
                                        "_check": "check_mark",
                                        "_deserialize": "deserialize_mark",
                                        "_resolve": "resolve_mark"
                                    },
                                    "_inherit": [
                                        "list[mark]"
                                    ]
                                },
                                "_inherit": [
                                    "tree[path]"
                                ]
                            },
                            "outputs": {
                                "_type": "wires",
                                "_default": "default_tree",
                                "_generate": "generate_tree",
                                "_check": "check_tree",
                                "_slice": "slice_tree",
                                "_apply": "apply_tree",
                                "_serialize": "serialize_tree",
                                "_deserialize": "deserialize_tree",
                                "_dataclass": "dataclass_tree",
                                "_fold": "fold_tree",
                                "_divide": "divide_tree",
                                "_resolve": "resolve_tree",
                                "_type_parameters": [
                                    "leaf"
                                ],
                                "_description": "mapping from str to some type in a potentially nested form",
                                "_leaf": {
                                    "_type": "path",
                                    "_default": [],
                                    "_check": "check_list",
                                    "_slice": "slice_list",
                                    "_apply": "apply_path",
                                    "_serialize": "serialize_list",
                                    "_deserialize": "deserialize_list",
                                    "_dataclass": "dataclass_list",
                                    "_fold": "fold_list",
                                    "_divide": "divide_list",
                                    "_type_parameters": [
                                        "element"
                                    ],
                                    "_description": "general list type (or sublists)",
                                    "_element": {
                                        "_type": "mark",
                                        "_apply": "apply_mark",
                                        "_check": "check_mark",
                                        "_deserialize": "deserialize_mark",
                                        "_resolve": "resolve_mark"
                                    },
                                    "_inherit": [
                                        "list[mark]"
                                    ]
                                },
                                "_inherit": [
                                    "tree[path]"
                                ]
                            },
                            "_graphviz": "graphviz_edge",
                            "_inherit": [
                                "edge"
                            ],
                            "_fold": "fold_visit",
                            "_divide": "divide_process",
                            "address": {
                                "_type": "protocol",
                                "_default": "",
                                "_check": "check_string",
                                "_apply": "replace",
                                "_serialize": "serialize_string",
                                "_deserialize": "deserialize_string",
                                "_dataclass": "dataclass_string",
                                "_description": "64-bit integer",
                                "_inherit": [
                                    "string"
                                ]
                            },
                            "config": {
                                "_type": "quote",
                                "_deserialize": "deserialize_quote",
                                "_default": "default_quote",
                                "_generate": "generate_quote",
                                "_sort": "sort_quote",
                                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                                "_graphviz": "graphviz_none"
                            }
                        }
                    },
                    "_inputs": {
                        "mass": "float",
                        "substrates": "map[positive_float]"
                    },
                    "_outputs": {
                        "mass": "float",
                        "substrates": "map[float]"
                    }
                }
            },
            "_description": "flat mapping from keys of strings to values of any type"
        },
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    5,
                    10
                ],
                "_data": "positive_float"
            }
        },
        "spatial_dfba": {
            "[0,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[0,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[1,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[2,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[3,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,0]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,1]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,2]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,3]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,4]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,5]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,6]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,7]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,8]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            },
            "[4,9]": {
                "_type": "process",
                "_default": "default_edge",
                "_generate": "generate_edge",
                "_apply": "apply_process",
                "_serialize": "serialize_process",
                "_deserialize": "deserialize_process",
                "_dataclass": "dataclass_edge",
                "_check": "check_process",
                "_slice": "slice_edge",
                "_inputs": {
                    "substrates": "map[positive_float]",
                    "biomass": "positive_float"
                },
                "_outputs": {
                    "substrates": "map[float]",
                    "biomass": "float"
                },
                "_description": "",
                "inputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "outputs": {
                    "_type": "wires",
                    "_default": "default_tree",
                    "_generate": "generate_tree",
                    "_check": "check_tree",
                    "_slice": "slice_tree",
                    "_apply": "apply_tree",
                    "_serialize": "serialize_tree",
                    "_deserialize": "deserialize_tree",
                    "_dataclass": "dataclass_tree",
                    "_fold": "fold_tree",
                    "_divide": "divide_tree",
                    "_resolve": "resolve_tree",
                    "_type_parameters": [
                        "leaf"
                    ],
                    "_description": "mapping from str to some type in a potentially nested form",
                    "_leaf": {
                        "_type": "path",
                        "_default": [],
                        "_check": "check_list",
                        "_slice": "slice_list",
                        "_apply": "apply_path",
                        "_serialize": "serialize_list",
                        "_deserialize": "deserialize_list",
                        "_dataclass": "dataclass_list",
                        "_fold": "fold_list",
                        "_divide": "divide_list",
                        "_type_parameters": [
                            "element"
                        ],
                        "_description": "general list type (or sublists)",
                        "_element": {
                            "_type": "mark",
                            "_apply": "apply_mark",
                            "_check": "check_mark",
                            "_deserialize": "deserialize_mark",
                            "_resolve": "resolve_mark"
                        },
                        "_inherit": [
                            "list[mark]"
                        ]
                    },
                    "_inherit": [
                        "tree[path]"
                    ]
                },
                "_graphviz": "graphviz_edge",
                "_inherit": [
                    "edge"
                ],
                "_fold": "fold_visit",
                "_divide": "divide_process",
                "interval": {
                    "_type": "interval",
                    "_check": "check_float",
                    "_apply": "set",
                    "_serialize": "to_string",
                    "_description": "64-bit floating point precision number",
                    "_default": "1.0",
                    "_deserialize": "deserialize_float",
                    "_divide": "divide_float",
                    "_dataclass": "dataclass_float",
                    "_inherit": [
                        "float"
                    ]
                },
                "address": {
                    "_type": "protocol",
                    "_default": "",
                    "_check": "check_string",
                    "_apply": "replace",
                    "_serialize": "serialize_string",
                    "_deserialize": "deserialize_string",
                    "_dataclass": "dataclass_string",
                    "_description": "64-bit integer",
                    "_inherit": [
                        "string"
                    ]
                },
                "config": {
                    "_type": "quote",
                    "_deserialize": "deserialize_quote",
                    "_default": "default_quote",
                    "_generate": "generate_quote",
                    "_sort": "sort_quote",
                    "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                    "_graphviz": "graphviz_none"
                },
                "shared": {
                    "_type": "map",
                    "_default": {},
                    "_generate": "generate_map",
                    "_apply": "apply_map",
                    "_serialize": "serialize_map",
                    "_deserialize": "deserialize_map",
                    "_resolve": "resolve_map",
                    "_dataclass": "dataclass_map",
                    "_check": "check_map",
                    "_slice": "slice_map",
                    "_fold": "fold_map",
                    "_divide": "divide_map",
                    "_sort": "sort_map",
                    "_type_parameters": [
                        "value"
                    ],
                    "_description": "flat mapping from keys of strings to values of any type",
                    "_value": {
                        "_type": "step",
                        "_default": "default_edge",
                        "_generate": "generate_edge",
                        "_apply": "apply_process",
                        "_serialize": "serialize_process",
                        "_deserialize": "deserialize_step",
                        "_dataclass": "dataclass_edge",
                        "_check": "check_process",
                        "_slice": "slice_edge",
                        "_type_parameters": [
                            "inputs",
                            "outputs"
                        ],
                        "_description": "",
                        "inputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "outputs": {
                            "_type": "wires",
                            "_default": "default_tree",
                            "_generate": "generate_tree",
                            "_check": "check_tree",
                            "_slice": "slice_tree",
                            "_apply": "apply_tree",
                            "_serialize": "serialize_tree",
                            "_deserialize": "deserialize_tree",
                            "_dataclass": "dataclass_tree",
                            "_fold": "fold_tree",
                            "_divide": "divide_tree",
                            "_resolve": "resolve_tree",
                            "_type_parameters": [
                                "leaf"
                            ],
                            "_description": "mapping from str to some type in a potentially nested form",
                            "_leaf": {
                                "_type": "path",
                                "_default": [],
                                "_check": "check_list",
                                "_slice": "slice_list",
                                "_apply": "apply_path",
                                "_serialize": "serialize_list",
                                "_deserialize": "deserialize_list",
                                "_dataclass": "dataclass_list",
                                "_fold": "fold_list",
                                "_divide": "divide_list",
                                "_type_parameters": [
                                    "element"
                                ],
                                "_description": "general list type (or sublists)",
                                "_element": {
                                    "_type": "mark",
                                    "_apply": "apply_mark",
                                    "_check": "check_mark",
                                    "_deserialize": "deserialize_mark",
                                    "_resolve": "resolve_mark"
                                },
                                "_inherit": [
                                    "list[mark]"
                                ]
                            },
                            "_inherit": [
                                "tree[path]"
                            ]
                        },
                        "_graphviz": "graphviz_edge",
                        "_inherit": [
                            "edge"
                        ],
                        "_fold": "fold_visit",
                        "_divide": "divide_process",
                        "address": {
                            "_type": "protocol",
                            "_default": "",
                            "_check": "check_string",
                            "_apply": "replace",
                            "_serialize": "serialize_string",
                            "_deserialize": "deserialize_string",
                            "_dataclass": "dataclass_string",
                            "_description": "64-bit integer",
                            "_inherit": [
                                "string"
                            ]
                        },
                        "config": {
                            "_type": "quote",
                            "_deserialize": "deserialize_quote",
                            "_default": "default_quote",
                            "_generate": "generate_quote",
                            "_sort": "sort_quote",
                            "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                            "_graphviz": "graphviz_none"
                        }
                    }
                }
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particle_movement": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "particles": "map[particle]",
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "particles": "map[particle]",
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            5,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        }
    }
}