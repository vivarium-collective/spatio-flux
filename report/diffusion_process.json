{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        11.600255492308463,
                        18.897126736142212,
                        19.04430015380053,
                        17.529869855930215,
                        4.988048450194837,
                        19.580729319088,
                        19.562619152369116,
                        14.026032700859744,
                        10.834374507648608,
                        4.6069311963569
                    ],
                    [
                        0.1495081046650859,
                        14.210822210406812,
                        6.052582621054212,
                        19.569771850130554,
                        2.9560094261331704,
                        16.082323400515108,
                        16.61040187842208,
                        9.52393904818065,
                        2.418326277712075,
                        4.966962477034363
                    ],
                    [
                        6.158751207860749,
                        14.58885572473793,
                        19.07772477115473,
                        5.748814788687417,
                        9.393281727624744,
                        3.43724508670034,
                        11.74416719572413,
                        13.841443182441068,
                        17.5420809228111,
                        7.121947312817523
                    ],
                    [
                        3.6795194596977354,
                        17.755663450009223,
                        10.758694572333837,
                        3.3634952043918975,
                        14.61153841555687,
                        15.570473849019798,
                        1.244488497707552,
                        9.564435889327198,
                        5.355129492504234,
                        11.62989388763485
                    ],
                    [
                        19.439001053590154,
                        13.25433681144587,
                        19.885537605418662,
                        5.463666640281732,
                        11.492228968622062,
                        14.475077792198867,
                        5.011157779395788,
                        17.415526381695,
                        13.887479824603146,
                        11.155473430331448
                    ],
                    [
                        15.088222836331838,
                        1.8805461017133651,
                        5.835713143062751,
                        9.269910330580265,
                        0.5003690896982316,
                        15.352231151193081,
                        5.068083042987737,
                        1.4121857143603944,
                        0.0068321891186884365,
                        7.177186435474621
                    ],
                    [
                        7.0714933293421485,
                        3.555920385455218,
                        15.08022686288827,
                        7.389237706033372,
                        0.042912462165274334,
                        12.882805052391376,
                        17.50890668807871,
                        9.425454090658612,
                        1.6910888610582342,
                        6.094888912489149
                    ],
                    [
                        6.480324104457081,
                        13.22537036570716,
                        18.405588579318856,
                        4.121308583133276,
                        14.762257738397125,
                        10.661830431953314,
                        8.603682629932452,
                        13.008698484401016,
                        11.322697991446146,
                        0.03307499076995457
                    ],
                    [
                        19.10281315500998,
                        1.4153347848293962,
                        15.194688885634095,
                        3.3633522627062673,
                        15.404640494546538,
                        17.134960723859535,
                        11.6257910655678,
                        8.04585715509526,
                        9.570358912629722,
                        15.512813778004213
                    ],
                    [
                        18.724665472343442,
                        8.315703705745893,
                        9.132620461512154,
                        5.709170501330039,
                        14.531506632762524,
                        5.617885301196626,
                        19.19004936462878,
                        9.713214836052014,
                        13.395067108637642,
                        11.305486121182245
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.007239603413201106,
                        0.002560118031600759,
                        0.00027906231384555724,
                        0.003915483044341813,
                        0.00916632008724218,
                        0.0067044777890286,
                        0.0003031662270959101,
                        0.006894078760146591,
                        0.004846871949621783,
                        0.0006610274849768816
                    ],
                    [
                        0.008671294296120836,
                        0.0004139768332294769,
                        0.009485847759379688,
                        0.003842234922745853,
                        0.002969906862256524,
                        0.00046182804484687704,
                        0.004046938039021461,
                        0.007098881242410391,
                        0.005913504637743541,
                        0.005369553477842927
                    ],
                    [
                        0.008956381488011715,
                        0.005001931305661904,
                        0.00034154667401341986,
                        0.0030462240880223435,
                        0.0019365340100449102,
                        0.0037514715833745073,
                        0.009327538138122518,
                        0.009009263683759127,
                        0.008862793590975937,
                        0.001293052750638265
                    ],
                    [
                        0.0034575189727563496,
                        0.0013644685065294093,
                        0.009017767135335683,
                        0.0040087639750336235,
                        0.009160718686328308,
                        0.00832924875122057,
                        0.005697554092094456,
                        0.007068580310716101,
                        0.005481359983139106,
                        0.006802970758321253
                    ],
                    [
                        0.006867021113011727,
                        0.007874426101320083,
                        0.007473681152627448,
                        0.006202776430920289,
                        0.0014583163179785286,
                        0.0075459969252911555,
                        0.008828948097766387,
                        0.007627127958940184,
                        0.00018932949280644595,
                        0.009208501075226526
                    ],
                    [
                        0.003944155947435694,
                        0.005385130708093361,
                        0.007395029192873072,
                        0.00010347063148132719,
                        0.000515774632144691,
                        0.006642271587662875,
                        0.000631318755553788,
                        0.002781727410626772,
                        0.0009644192650347383,
                        0.0057999017497291005
                    ],
                    [
                        0.009387698900299031,
                        0.003246297632738234,
                        0.0028598389511390035,
                        0.0034916059351315556,
                        0.007450546730845349,
                        0.005740919345713428,
                        0.008939496621649808,
                        0.005458588777747235,
                        0.009900229148348084,
                        0.004705852437383041
                    ],
                    [
                        0.00048425332461025873,
                        0.009481602669125396,
                        0.007406688592139391,
                        0.003482728850803305,
                        0.0029347125298090928,
                        0.005317151760070646,
                        0.004464792004068977,
                        0.004039477538586958,
                        0.0012745799264888902,
                        0.009106504555520582
                    ],
                    [
                        0.004692741913900717,
                        0.003923644524256631,
                        0.002314513487679205,
                        0.001269484487395781,
                        0.0037658626665331607,
                        0.0021192590195172945,
                        0.003674189346751162,
                        0.0009020535513597594,
                        0.0007756070960866058,
                        0.008914476915031588
                    ],
                    [
                        0.009536769845817883,
                        0.008089397844700186,
                        0.000751312486651825,
                        0.0034612794615045306,
                        0.00023327162186888352,
                        0.005508668688757907,
                        0.0006218196973844903,
                        0.0010654611009874905,
                        0.004836803501429961,
                        5.933264453165221e-05
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.08523785606722761,
                        0.030642570828591155,
                        0.039075174951377335,
                        0.06500255002642395,
                        0.007002442977540691,
                        0.05673357800518032,
                        0.03784539080723012,
                        0.08005408132183196,
                        0.062029192298421514,
                        0.042292157896154675
                    ],
                    [
                        0.002083902875055044,
                        0.02423694749967248,
                        0.006263855732507585,
                        0.08419971627290103,
                        0.01728291589364922,
                        0.09894719930657547,
                        0.06454980511257158,
                        0.07683864847981897,
                        0.08347666601437809,
                        0.05313238420091723
                    ],
                    [
                        0.07056663976212543,
                        0.05789606237181514,
                        0.02413564927119153,
                        0.04113458075995673,
                        0.001425247093102644,
                        0.003913903640150707,
                        0.03595614652167315,
                        0.06670587409512978,
                        0.04234737043264101,
                        0.026920397210824634
                    ],
                    [
                        0.09569271681186346,
                        0.06558849025501683,
                        0.008742008461697093,
                        0.024728024629763968,
                        0.016235990510180442,
                        0.05601183539037927,
                        0.04456571556216291,
                        0.03880985304002589,
                        0.051352655343161996,
                        0.03398223914416916
                    ],
                    [
                        0.0615496353804148,
                        0.042053526334001126,
                        0.0994422187699579,
                        0.06328950077678157,
                        0.055386843388518285,
                        0.03507290342866124,
                        0.06589933896541537,
                        0.06606380035006335,
                        0.017512282908260113,
                        0.02643907086171179
                    ],
                    [
                        0.05813820487496692,
                        0.02570591370120902,
                        0.08093929308285984,
                        0.028319223075870294,
                        0.07876358467197997,
                        0.02854423514591208,
                        0.0685511387685234,
                        0.0689575183528611,
                        0.09482412277088348,
                        0.07091788178148972
                    ],
                    [
                        0.05976820424629079,
                        0.0777736260564846,
                        0.03869020198947483,
                        0.011577128881476407,
                        0.07905007747821913,
                        0.06441314020530409,
                        0.09039972561468479,
                        0.03782906443079497,
                        0.08038909601561332,
                        0.08443898315095061
                    ],
                    [
                        0.04048091890314465,
                        0.026021316599705926,
                        0.03977936177353833,
                        0.017318079763390837,
                        0.04181064861015828,
                        0.04719662279009034,
                        0.04168689515554424,
                        0.023861115030012283,
                        0.08860822625964986,
                        0.0803111348295282
                    ],
                    [
                        0.06779320281488498,
                        0.06181721523541139,
                        0.07070552256137684,
                        0.08503227649847779,
                        0.08025702069789603,
                        0.007064556131785605,
                        0.05179386813165816,
                        0.06427881691549324,
                        0.054026056132400996,
                        0.0175804571917497
                    ],
                    [
                        0.04709835138380605,
                        0.057454254426734575,
                        0.03530152100448821,
                        0.013012931254929284,
                        0.04773907730599597,
                        0.0100969054280588,
                        0.05601357332521231,
                        0.06060606856711734,
                        0.07870327268711712,
                        0.007567575286185913
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "10"
                ],
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "biomass": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "biomass": [
                        "0.0",
                        "-0.1"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    10
                ],
                "_data": "positive_float"
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}