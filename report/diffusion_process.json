{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        1.6660828407387673,
                        13.028298902869802,
                        12.632035915410713,
                        7.029809515273657,
                        7.6346766577214,
                        7.709508953054208
                    ],
                    [
                        18.342926153412947,
                        5.887616560167041,
                        16.113238950604483,
                        4.310895520011552,
                        11.84075464442791,
                        17.410804460211956
                    ],
                    [
                        2.472052020852551,
                        7.114518898379451,
                        3.559879759195783,
                        10.40813117103781,
                        0.6950918258965522,
                        14.098446333430942
                    ],
                    [
                        2.588194918220257,
                        12.187717822349365,
                        7.35402496785857,
                        18.29069825849883,
                        18.64972522840238,
                        8.134203365045057
                    ],
                    [
                        6.751407369078233,
                        14.590039046253258,
                        19.02387521256871,
                        14.695508892867865,
                        1.8305255549438737,
                        14.289861040024892
                    ],
                    [
                        8.74968100507285,
                        19.892305993445284,
                        15.699478206670022,
                        10.502374220694627,
                        0.12878599164361848,
                        5.204859344614157
                    ],
                    [
                        10.027535565377438,
                        10.25904614417865,
                        3.229603290172758,
                        11.322058023454888,
                        17.479139372950556,
                        9.690448369807093
                    ],
                    [
                        10.465280558450763,
                        8.096589085004695,
                        3.4257342127848744,
                        4.398977292112949,
                        1.4276726948996776,
                        0.20825272344536572
                    ],
                    [
                        3.767842326056028,
                        0.7847988519575466,
                        19.247256155707227,
                        4.4647390475741755,
                        0.1734828741522665,
                        16.98152311034956
                    ],
                    [
                        10.878667440590279,
                        7.567048501126656,
                        5.685178797088857,
                        15.253176549065648,
                        8.170755940712269,
                        11.493602921999013
                    ],
                    [
                        6.8945559569843144,
                        5.882156477543468,
                        3.178951940797865,
                        5.348272180904006,
                        11.883154572553146,
                        7.520156801206714
                    ],
                    [
                        9.788412771836887,
                        17.13305119019319,
                        17.519186295490716,
                        14.744688523684061,
                        2.615101257431589,
                        4.745951406374536
                    ]
                ],
                "data": "float",
                "shape": [
                    12,
                    6
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.005911497993449445,
                        0.009846688773815278,
                        0.0008983192369951776,
                        0.0007634547150846138,
                        0.002116752812733298,
                        0.007307613139535443
                    ],
                    [
                        0.006186036945490854,
                        0.008334026053768586,
                        0.005266582358829335,
                        0.006508908192527782,
                        0.009771128595430915,
                        0.0012407003067026311
                    ],
                    [
                        0.0017814335187219033,
                        0.009996927728925385,
                        0.0033318282739339513,
                        0.006658924291334342,
                        0.008688672643420891,
                        0.008533608583105578
                    ],
                    [
                        0.0014175562815280495,
                        0.002700127129542197,
                        0.0013519491215765434,
                        0.0010184614863516929,
                        0.0013258718130635995,
                        0.0030430235910494396
                    ],
                    [
                        0.009038839300544069,
                        0.006349868299320905,
                        0.004626849279373906,
                        0.00927843869605994,
                        0.0075461921801328845,
                        0.005036411062348759
                    ],
                    [
                        0.005398643626163927,
                        0.0010274889051980918,
                        0.0029113868561626765,
                        0.0032863949378917757,
                        0.001926788271252502,
                        0.007778446257268376
                    ],
                    [
                        0.0027059759530104676,
                        0.0039077594411586645,
                        5.762171469893884e-05,
                        0.0011550922169606093,
                        0.0006751694120129603,
                        0.006652740872884802
                    ],
                    [
                        0.008074891762800365,
                        0.0037931421076351367,
                        0.0044526300462750905,
                        0.005541971934425984,
                        0.007535575870039418,
                        0.005594304827059416
                    ],
                    [
                        0.007415052483256801,
                        0.0098452296927778,
                        0.0074382963472614414,
                        7.710110079622856e-05,
                        0.008236597936509249,
                        0.0052580388774692245
                    ],
                    [
                        0.0057895414454751494,
                        0.005711913249324462,
                        0.0021722357089788568,
                        0.0070240209261389465,
                        0.0009643810330231828,
                        0.005943374356505259
                    ],
                    [
                        0.00784000073676392,
                        0.0006991911077879009,
                        0.00154435898308825,
                        0.009544567116608343,
                        0.004943978431745916,
                        0.0009648488384476795
                    ],
                    [
                        0.0058896563278560176,
                        0.009813788137809714,
                        0.005848345685544848,
                        0.004783620964886591,
                        0.0019900193280728406,
                        0.003942387114137525
                    ]
                ],
                "data": "float",
                "shape": [
                    12,
                    6
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.07427946938346708,
                        0.034063314050130536,
                        0.05124484159022389,
                        0.05183134044235558,
                        0.043927565097763105,
                        0.09366202218408677
                    ],
                    [
                        0.06071327579845102,
                        0.04265114910869873,
                        0.010292758624868515,
                        0.04534847532659252,
                        0.03646386256177495,
                        0.03353547666521106
                    ],
                    [
                        0.010373637525204139,
                        0.04810585386129917,
                        0.0016458647343976507,
                        0.008631731393113939,
                        0.09118518092911361,
                        0.0015311474402834313
                    ],
                    [
                        0.0726518116440955,
                        0.09859284901849627,
                        0.04694043142241222,
                        0.04809219800135796,
                        0.05398910792619473,
                        0.07170757404722065
                    ],
                    [
                        0.04652902748024438,
                        0.09651443726627146,
                        0.031168208313287385,
                        0.0682480012251078,
                        0.028349643685228767,
                        0.024133417140852154
                    ],
                    [
                        0.03804815669386779,
                        0.06047493561831452,
                        0.08416890589612908,
                        0.06340431419146433,
                        0.010236213810657558,
                        0.09356565312905797
                    ],
                    [
                        0.026126135099689474,
                        0.07154903265620415,
                        0.008026680096112038,
                        0.04404389248783346,
                        0.025031850946825463,
                        0.09794120421891
                    ],
                    [
                        0.036680986225822866,
                        0.092073267789974,
                        0.08841671757080397,
                        0.044188042966485756,
                        0.03760129240952367,
                        0.08225049205234682
                    ],
                    [
                        0.07954590982997067,
                        0.03307154700937368,
                        0.09438153640045142,
                        0.06862210601403165,
                        0.05917293171786502,
                        0.06944357881149908
                    ],
                    [
                        0.0989319624897415,
                        0.07471890508332377,
                        0.04852417160129083,
                        0.032837701662495354,
                        0.056939724898942834,
                        0.03961586893224078
                    ],
                    [
                        0.04985211440373693,
                        0.02238756416912854,
                        0.05553743266390641,
                        0.009191424680685557,
                        0.010368954850454993,
                        0.010414070491712014
                    ],
                    [
                        0.013775916481303397,
                        0.015089105146937665,
                        0.0726640828506731,
                        0.07932469366247842,
                        0.04718325301629546,
                        0.005577627454361234
                    ]
                ],
                "data": "float",
                "shape": [
                    12,
                    6
                ]
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "12",
                    "6"
                ],
                "bounds": [
                    "10.0",
                    "5.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "biomass": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "biomass": [
                        "0.0",
                        "-0.1"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    12,
                    6
                ],
                "_data": "positive_float"
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            12,
                            6
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            12,
                            6
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}