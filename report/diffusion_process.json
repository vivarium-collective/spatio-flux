{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        4.6700400301474465,
                        5.248100265990563,
                        7.1640010244361685,
                        6.85736344237349,
                        19.901556054007866,
                        19.08257770501016
                    ],
                    [
                        15.433704642349708,
                        13.449503417685227,
                        2.4850563159588135,
                        17.982121016159137,
                        12.712221681729917,
                        17.86015558615009
                    ],
                    [
                        1.0248097086487928,
                        5.835510121407492,
                        7.615758593199176,
                        1.6750409802082333,
                        11.26617948110992,
                        19.92266140059882
                    ],
                    [
                        14.491448565438375,
                        14.29336572270061,
                        3.6222723267747114,
                        2.3699696892317834,
                        6.538368936045858,
                        19.95602140752866
                    ],
                    [
                        0.9351707851809055,
                        1.736086809083257,
                        0.5202660179958873,
                        1.7658127886614583,
                        8.178212228085144,
                        13.639322872914688
                    ],
                    [
                        9.081082837430984,
                        10.380448381168998,
                        17.783595314180914,
                        10.759094982425728,
                        1.0318385369098548,
                        17.327137839393004
                    ],
                    [
                        14.811361988895872,
                        3.741855484481955,
                        12.232076395109656,
                        12.935607301948025,
                        18.120185126434073,
                        8.685172149569684
                    ],
                    [
                        12.167961331759196,
                        2.6796741129425294,
                        1.6607454596851001,
                        9.282212542926072,
                        8.711532322953701,
                        15.047402128587802
                    ],
                    [
                        13.27931752393113,
                        17.483016594963704,
                        9.592675902876458,
                        8.711026332306533,
                        9.749496854236547,
                        13.624265211406374
                    ],
                    [
                        2.9638984935867474,
                        5.472890158133266,
                        2.349153617758448,
                        4.118572285091906,
                        2.708058881987221,
                        10.669759374225602
                    ],
                    [
                        11.434115187595808,
                        4.189459596846746,
                        17.615521943756736,
                        13.894039981394846,
                        11.541755626449703,
                        2.093060114993699
                    ],
                    [
                        11.203468567784373,
                        2.8224090624921283,
                        12.231413200196911,
                        14.81757662648172,
                        19.282646617354807,
                        6.6217877274599735
                    ]
                ],
                "data": "float",
                "shape": [
                    12,
                    6
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0042867201756873795,
                        0.007874866482145398,
                        0.005536097286292473,
                        0.006990642317541429,
                        0.005541049921914803,
                        0.005466784560754311
                    ],
                    [
                        0.00018019000306633616,
                        0.009563520802304768,
                        0.0016004968922404884,
                        0.006101439323852566,
                        0.004249722803882796,
                        0.009332701153527493
                    ],
                    [
                        0.009138691491173773,
                        0.009675805794397535,
                        0.008679028768438244,
                        0.0003818731344161164,
                        0.003338204656124153,
                        0.0009158374432707139
                    ],
                    [
                        0.0020132056904931138,
                        0.007467399899806723,
                        0.007995493470475745,
                        0.009974611133687545,
                        0.009341425849180879,
                        0.0009597547096698478
                    ],
                    [
                        0.002069993413600979,
                        0.0034727571922657974,
                        0.00508178667467526,
                        0.00625929088814536,
                        0.008854093141198683,
                        0.007354088216311216
                    ],
                    [
                        0.006964158364178954,
                        0.0026448601308737595,
                        0.009546913727021496,
                        0.004067131250953302,
                        0.008424486248153246,
                        0.00409347151832784
                    ],
                    [
                        0.004268205333548978,
                        0.008921633255754116,
                        0.0060561361988177,
                        0.0021090627625141235,
                        0.007188833080847981,
                        0.002173703345914816
                    ],
                    [
                        0.0024307573790486215,
                        0.004191557513988665,
                        0.006154367098467192,
                        0.005232473229491592,
                        0.009859461656724775,
                        0.009000495895404102
                    ],
                    [
                        0.007583578767777423,
                        0.00989651861814733,
                        0.002935597325908178,
                        0.006011496704652338,
                        6.0745467260785445e-05,
                        0.004457637100679266
                    ],
                    [
                        0.0016540822886945928,
                        0.009695579944347887,
                        0.005304530496739558,
                        0.003109417264214032,
                        0.0072768384501271976,
                        0.007381699826471466
                    ],
                    [
                        0.002601253370100626,
                        0.004155747271904566,
                        0.0025901347386825934,
                        0.0005156090082407616,
                        7.193835052645259e-05,
                        0.005418953091984874
                    ],
                    [
                        0.0035762638018194603,
                        0.009127646003041785,
                        0.002793591676620587,
                        0.009177411019897703,
                        0.007683779594330726,
                        0.0009315370281995827
                    ]
                ],
                "data": "float",
                "shape": [
                    12,
                    6
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.010193716814011433,
                        0.029479602508827387,
                        0.023698353425027963,
                        0.019807816068105624,
                        0.045109837998744774,
                        0.07056498465808334
                    ],
                    [
                        0.044361455944671585,
                        0.08503358955299942,
                        0.011229683588526052,
                        0.04048146156046165,
                        0.0004762161409672006,
                        0.03712847913887959
                    ],
                    [
                        0.05020969115513925,
                        0.005858369586267076,
                        0.0939246629646939,
                        0.0020765489698299166,
                        0.02727794092617507,
                        0.09165062123375728
                    ],
                    [
                        0.09341558884075483,
                        0.004649397807609624,
                        0.03618664082687163,
                        0.09415022451109152,
                        0.01201577929987594,
                        0.09381126639508333
                    ],
                    [
                        0.032415705724875336,
                        0.08443191046994514,
                        0.0019097202416302418,
                        0.08653184774268624,
                        0.038050522756916054,
                        0.09870005228285512
                    ],
                    [
                        0.0423588385039863,
                        0.019982608715045605,
                        0.02497255039869454,
                        0.06949588257758448,
                        0.05634457520536806,
                        0.016838120261760927
                    ],
                    [
                        0.04785416116602725,
                        0.06332760933778286,
                        0.017659412779362726,
                        0.016561219819750585,
                        0.05027411106635579,
                        0.08939355981222377
                    ],
                    [
                        0.07753653329373511,
                        0.06023109548420961,
                        0.01596757471167104,
                        0.0580143337056036,
                        0.03992925243083426,
                        0.02722527278492324
                    ],
                    [
                        0.03677345487513739,
                        0.03872005791699508,
                        0.07920280340469656,
                        0.05012928715499609,
                        0.06830674557414894,
                        0.020711834811339536
                    ],
                    [
                        0.04956414747228354,
                        0.04652946278545083,
                        0.027024717548105016,
                        0.06493909709580967,
                        0.02392410211811832,
                        0.046646243498306865
                    ],
                    [
                        0.003367914783831416,
                        0.09899490550012502,
                        0.02535996892538709,
                        0.0637041832204727,
                        0.07447611846548764,
                        0.01731787874816859
                    ],
                    [
                        0.09919082738626855,
                        0.08636302941524823,
                        0.05249041893113396,
                        0.061879834081043174,
                        0.019221228184134423,
                        0.024696095683438682
                    ]
                ],
                "data": "float",
                "shape": [
                    12,
                    6
                ]
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "12",
                    "6"
                ],
                "bounds": [
                    "10.0",
                    "5.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "biomass": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "biomass": [
                        "0.0",
                        "-0.1"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any"
                }
            }
        }
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_graphviz": "graphviz_map",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    12,
                    6
                ],
                "_data": "positive_float"
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            12,
                            6
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            12,
                            6
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_graphviz": "graphviz_map",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        }
    }
}