{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        11.337368913311916,
                        0.13661112019391464,
                        6.797311396449459,
                        5.821163711485191,
                        4.907840020389993,
                        19.993090736667924,
                        14.02168505980188,
                        4.5227817154607575,
                        9.130382246930399,
                        11.077068330094981
                    ],
                    [
                        5.378223443893468,
                        13.423107116410664,
                        13.752222197774229,
                        1.1055498257610696,
                        10.665041905924733,
                        3.042468974977135,
                        19.8878600539923,
                        19.456291950785708,
                        12.849618934739675,
                        13.701844548369985
                    ],
                    [
                        2.3007411241323705,
                        4.842974668404503,
                        0.5603491056892507,
                        3.400772769643017,
                        17.25708855902663,
                        7.0760632326830635,
                        5.731371337384214,
                        8.89381596144519,
                        4.725860717075625,
                        8.91671732169305
                    ],
                    [
                        6.134690134655745,
                        14.980352289956802,
                        0.3608142946863713,
                        7.04852733416903,
                        4.040407759821935,
                        17.498462833245416,
                        18.437921384872567,
                        17.913291853011604,
                        10.568513717987038,
                        5.250907782248467
                    ],
                    [
                        9.513730302345058,
                        13.831079691949224,
                        9.187727204905613,
                        2.317173566015651,
                        11.87819592326034,
                        5.592336671545565,
                        13.475376511347077,
                        8.709718844943222,
                        5.290320198765213,
                        19.397729620242664
                    ],
                    [
                        0.831434588808897,
                        17.382919223714975,
                        1.816980219022788,
                        8.150387043356123,
                        9.25527403490542,
                        19.744822519597747,
                        8.376629422120116,
                        10.087013791202953,
                        5.738981174946744,
                        13.355872920415655
                    ],
                    [
                        19.67350989541696,
                        18.411981127003074,
                        17.510800198199284,
                        17.46458055726951,
                        0.41809387434867507,
                        4.874052298635707,
                        3.6157398460504653,
                        18.489766329604272,
                        16.031653828354507,
                        8.134808865058398
                    ],
                    [
                        6.864963079112767,
                        11.679793285249234,
                        15.992294914228996,
                        3.0639961877037925,
                        14.623206405874472,
                        1.2885403980986276,
                        7.347244055845583,
                        19.594346792818577,
                        13.363522518030134,
                        2.6727971000889172
                    ],
                    [
                        2.068075639960194,
                        14.969417394996352,
                        5.671672425877928,
                        10.127985424983104,
                        8.957802258419791,
                        4.377707289579968,
                        16.79429035259061,
                        8.462701545585967,
                        2.320732400330512,
                        12.147326983844273
                    ],
                    [
                        5.944460355930037,
                        19.798839996421346,
                        8.415900400010125,
                        11.906746121539996,
                        1.3938679946383914,
                        1.6544398502015167,
                        16.940780836032058,
                        2.258158781379618,
                        15.48905542162572,
                        6.392051757639199
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.008546864810975966,
                        0.0059347579658684734,
                        0.009704766098388218,
                        0.009127781671673812,
                        0.001912806251252962,
                        0.00952344829114621,
                        0.007270942110713077,
                        0.001951985799260404,
                        0.0030918220172471357,
                        0.005641795261197861
                    ],
                    [
                        0.0034451869325359476,
                        0.006297925168782577,
                        0.001953163251978679,
                        0.000811964292206524,
                        0.001335606705802248,
                        0.00567551818762859,
                        0.0008458576731201318,
                        0.005405679716535873,
                        0.0008634530404961538,
                        0.007629895474517454
                    ],
                    [
                        0.0020695473330170845,
                        0.004384375564721771,
                        0.009003866993115043,
                        0.008811688296191124,
                        0.006662507780049147,
                        0.008057948943021568,
                        0.00906819607085888,
                        0.004348975151586842,
                        0.00230078747700509,
                        0.00020510018795994456
                    ],
                    [
                        0.00363733667794686,
                        0.0036041328503984317,
                        0.005503564872915009,
                        0.009709922834201022,
                        0.009880667935941632,
                        0.009242501398985189,
                        0.009087634675909539,
                        0.005012902401320811,
                        0.005124529727255636,
                        0.0061150235986189225
                    ],
                    [
                        0.0053984504494938084,
                        0.006573526208586421,
                        0.0046390746469790346,
                        0.007112081114675499,
                        0.003364080238915188,
                        0.002281538411214702,
                        0.007057665218592001,
                        0.003148207999963879,
                        4.081032470319879e-05,
                        0.006482257531149563
                    ],
                    [
                        0.00041484706013957483,
                        0.0028757597526885103,
                        0.007412549891209438,
                        0.008666275615304836,
                        0.009979719468379274,
                        0.009610241234645192,
                        0.0037393915949798084,
                        0.002936651034578416,
                        0.009467035834503661,
                        0.003949314055216571
                    ],
                    [
                        0.004016084978553606,
                        0.0007361330390046351,
                        0.004621002049461872,
                        0.007341969203347446,
                        0.0082660617651093,
                        2.5792287666601687e-05,
                        0.0007628983337234352,
                        0.0021770311467242086,
                        0.0008287465373965719,
                        0.007195731212649369
                    ],
                    [
                        0.0010388630806267053,
                        0.001636063803371155,
                        0.009921669789405719,
                        0.008176650090062406,
                        0.003440202661246015,
                        0.0060054912839371186,
                        0.008061022846520535,
                        0.005683707972482857,
                        0.004464721938573937,
                        0.004437250875051622
                    ],
                    [
                        0.003227390610500043,
                        0.009179437627191159,
                        0.00996052709984996,
                        0.002347203277238342,
                        0.005219556092833207,
                        0.006232634927010012,
                        0.006298926847849155,
                        0.003926230430864869,
                        0.008484674418251776,
                        0.004025140193923474
                    ],
                    [
                        0.007446358742648616,
                        0.005765104225147827,
                        0.006282792501021237,
                        0.008324663789171894,
                        0.008594089587110396,
                        0.00042492210003415077,
                        0.008963045831633591,
                        0.002043676611106273,
                        0.0013699204694643096,
                        0.001693860123713572
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.028249574927241772,
                        0.05540645117220571,
                        0.06479391458510561,
                        0.0506285680430488,
                        0.03146869760143033,
                        0.02149370640270626,
                        0.03659079709879335,
                        0.09556488453289909,
                        0.01945641743401584,
                        0.08539699081210944
                    ],
                    [
                        0.09688139153044173,
                        0.030919982764605815,
                        0.015596809645304854,
                        0.07042853699760776,
                        0.032686789872204594,
                        0.050349451888762234,
                        0.05332862123605188,
                        0.08865057191755231,
                        0.04210523436842321,
                        0.002680632458729382
                    ],
                    [
                        0.07334516272202019,
                        0.08103735866823766,
                        0.08637832384920055,
                        0.08449929268205912,
                        0.07892320682235568,
                        0.01822643187695642,
                        0.06892696257277413,
                        0.08927971888551983,
                        0.057831526848288045,
                        0.007991583315140993
                    ],
                    [
                        0.0010735301838124213,
                        0.04758863079702881,
                        0.036564518802992385,
                        0.09618798491052377,
                        0.0042233638910785356,
                        0.08085450331541243,
                        0.0024080146025639015,
                        0.09817315565181274,
                        0.08799524249433038,
                        0.09741729157411566
                    ],
                    [
                        0.08449640066254946,
                        0.08063555913719839,
                        0.08432305874701485,
                        0.09156819421433558,
                        0.06736350899314218,
                        0.003560285875505043,
                        0.0011285184591611098,
                        0.07130600987217774,
                        0.04836643879563273,
                        0.09125478372249562
                    ],
                    [
                        0.06281168647206302,
                        0.09255164438742153,
                        0.0691929486496329,
                        0.05912753734058031,
                        0.08812864477349489,
                        0.04416043472618878,
                        0.07349369083440559,
                        0.04279513427763896,
                        0.07297895573675393,
                        0.05403330233823206
                    ],
                    [
                        0.08069405911581945,
                        0.0965220899519321,
                        0.005545853646722609,
                        0.00010472213811613118,
                        0.03514071704267492,
                        0.06403070794844803,
                        0.07450834242225492,
                        0.08499781955151302,
                        0.09389442757853676,
                        0.07587444601477851
                    ],
                    [
                        0.09567721499887125,
                        0.07232501081889547,
                        0.08939919860115127,
                        0.026394524165207014,
                        0.04803527153832449,
                        0.0722719038740918,
                        0.019582240648284777,
                        0.06604864052578002,
                        0.08207447492483112,
                        0.07193969201893329
                    ],
                    [
                        0.09139906916649916,
                        0.07375878975048321,
                        0.04021589437954164,
                        0.08814897249339607,
                        0.06968535182805423,
                        0.032951562516350195,
                        0.08268482108149394,
                        0.00025755693849086606,
                        0.026410410968116662,
                        0.012724529380726457
                    ],
                    [
                        0.025223982833143224,
                        0.05702072354083605,
                        0.045301876037211745,
                        0.005410818185465205,
                        0.014030531664995695,
                        0.07751981800726616,
                        0.07225335338898257,
                        0.037108247266672965,
                        0.09297934897399095,
                        0.0158714853378919
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "10"
                ],
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "biomass": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "biomass": [
                        "0.0",
                        "-0.1"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    10
                ],
                "_data": "positive_float"
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}