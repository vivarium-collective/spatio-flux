{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        8.256488474856278,
                        19.615534837769868,
                        0.80365052977873,
                        12.05446069789045,
                        11.282022861150372,
                        18.48071256214266,
                        18.533241838663542,
                        19.638521532692916,
                        16.509114433464845,
                        11.505420870580211
                    ],
                    [
                        17.56172607836224,
                        6.856134861021161,
                        7.729286772824664,
                        9.865804167585356,
                        6.776548447604169,
                        8.772092453141248,
                        1.2384696578010357,
                        3.9077914560713856,
                        8.449962815110545,
                        17.705762942977394
                    ],
                    [
                        9.41934759812572,
                        17.100758866707054,
                        3.6570908984465333,
                        12.87281936273292,
                        11.332787293125383,
                        17.720644509449656,
                        5.226158699980683,
                        16.595437700158303,
                        10.431892592892702,
                        5.0908541094802295
                    ],
                    [
                        8.30017943911476,
                        10.167633488540666,
                        12.236304064927888,
                        7.87886782882955,
                        11.123309917364637,
                        13.19453754577957,
                        18.730174716965855,
                        16.751581481766454,
                        4.95525965846393,
                        14.387247027077326
                    ],
                    [
                        17.83368345201651,
                        6.4327381905333585,
                        18.23649538477979,
                        15.181288518720601,
                        2.4305550766534623,
                        0.8971575581567826,
                        9.053058947291658,
                        2.609122172623608,
                        16.564659354455447,
                        8.281530526374045
                    ],
                    [
                        17.552664883418956,
                        9.112743424046768,
                        2.970248932401378,
                        9.508635973312243,
                        1.877495717919111,
                        6.471045852218349,
                        19.232977602780075,
                        5.322694044855725,
                        7.04452532427589,
                        19.381308872701275
                    ],
                    [
                        7.225730688434142,
                        12.07699331142014,
                        12.424229357039039,
                        2.946269977880547,
                        15.022872230207856,
                        19.12370686080774,
                        2.274247066992756,
                        1.1818253642362841,
                        4.850493801347417,
                        4.060429048471472
                    ],
                    [
                        11.182502020256557,
                        6.6605583768605925,
                        14.23709512487598,
                        1.6898055795417766,
                        1.0909405413443918,
                        16.137401053761486,
                        16.62224836736529,
                        12.16751847626858,
                        19.558565447997964,
                        13.728087618304276
                    ],
                    [
                        9.982582478519802,
                        9.49132249351808,
                        11.655808466325428,
                        3.6917749764149077,
                        15.459985034989769,
                        2.0313337499543227,
                        14.876518546677776,
                        10.662236108253222,
                        3.091846845734365,
                        3.5562605901436584
                    ],
                    [
                        13.627705147492755,
                        15.710963532212645,
                        8.58347597059726,
                        6.1295807025367495,
                        5.297249695748246,
                        0.06347653546724397,
                        16.366998166174906,
                        12.892482500722469,
                        16.586911705841125,
                        19.410750965549674
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.0013019749744090402,
                        0.009970296663442808,
                        0.0017284385733584485,
                        0.009344839555462761,
                        0.008595279574753907,
                        0.0005016737425086604,
                        0.004364550657433337,
                        0.0038511317376920275,
                        0.009694671317160664,
                        0.0006384063090366243
                    ],
                    [
                        0.0022182005652122017,
                        0.0007476655153016254,
                        0.0018879583910852871,
                        0.0008572138212725567,
                        0.009042976035733587,
                        0.005224246232338784,
                        0.006860034616276306,
                        0.0062435989108079026,
                        0.0003123026610612234,
                        0.009281109108413154
                    ],
                    [
                        0.0091706310239276,
                        0.00579324671952905,
                        0.005793864495329293,
                        0.004348512078293906,
                        0.009576728367666319,
                        0.004008612435350932,
                        0.0023518377408507972,
                        0.0019187859816052323,
                        0.0017352407738780817,
                        0.0015660259621952256
                    ],
                    [
                        0.009653555058770477,
                        0.009327892864547863,
                        0.006998051862044336,
                        0.0010578356081750106,
                        0.0005414890950089824,
                        0.0012057303526616448,
                        0.0014466822462521822,
                        0.006947672672327894,
                        0.005035566349603179,
                        0.009605728570143648
                    ],
                    [
                        0.0035661218468581845,
                        0.0022719130775384457,
                        0.004005744292141982,
                        0.0027996118173942686,
                        0.001055990004468992,
                        0.004325450707719971,
                        0.0025047241468857864,
                        0.003963242264278612,
                        0.008618418308420306,
                        0.0005464205440610404
                    ],
                    [
                        0.009034466969620845,
                        0.009009614973446456,
                        0.007404295731001622,
                        0.0020002456425596395,
                        0.005852604799844443,
                        0.005133971292509941,
                        0.006140244344508591,
                        0.009643602725747392,
                        0.005491589348756319,
                        0.0044327362373169634
                    ],
                    [
                        0.0011520520335718976,
                        0.005376775596785372,
                        0.004081785531506835,
                        0.0011951635256663008,
                        0.006371695785641497,
                        0.007547656714930176,
                        0.003192939347105304,
                        0.0031661189487187436,
                        0.002633323997720426,
                        0.0083470922261616
                    ],
                    [
                        0.007159410986424688,
                        0.008137889967629427,
                        0.006078850460453218,
                        0.005692327954467307,
                        0.002979158055859871,
                        0.00888518724373157,
                        0.0052348091694971125,
                        0.004699013382440001,
                        0.0065198921929180325,
                        0.002898744883589699
                    ],
                    [
                        9.141379869255228e-05,
                        0.009063367591661951,
                        0.007253791843431967,
                        0.002768687173426794,
                        0.007371759327242247,
                        0.00949118232630313,
                        0.003224121869442337,
                        0.003225302246978895,
                        0.0020874536396424813,
                        0.0021582202169227018
                    ],
                    [
                        0.008107137993932275,
                        0.005207687707003091,
                        0.0031105339192124505,
                        0.008114284876889456,
                        0.003138685506195168,
                        0.0017469019060788894,
                        0.00745733456629866,
                        0.007290208947675677,
                        6.257608995965502e-05,
                        0.005388826064816711
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.036846219908033585,
                        0.037840909495463586,
                        0.04993459710990936,
                        0.018849501937445758,
                        0.0694236846698253,
                        0.0879771383735692,
                        0.08700108773895851,
                        0.0819697752493043,
                        0.06785375935567185,
                        0.0310288482496933
                    ],
                    [
                        0.05262386509318787,
                        0.09312307427392283,
                        0.09547891568899153,
                        0.07394231785072164,
                        0.021867548576820897,
                        0.06612999157044913,
                        0.07272620632313817,
                        0.0894415517965952,
                        0.08750849211192473,
                        0.01563169340025289
                    ],
                    [
                        0.06742086143799243,
                        0.04510659013474338,
                        0.01892855784150095,
                        0.008456321729012829,
                        0.023075801386157224,
                        0.05036880056167819,
                        0.07674711606523849,
                        0.0806042445405881,
                        0.012591647586598965,
                        0.08026463874157608
                    ],
                    [
                        0.09444356105131436,
                        0.022296804181034215,
                        0.06378802699079646,
                        0.0721685563426938,
                        0.0047935956585152375,
                        0.014495534477235074,
                        0.08247268081324771,
                        0.09423921585000766,
                        0.039047503377553944,
                        0.06954908600298193
                    ],
                    [
                        0.0655316746588114,
                        0.03492780753021381,
                        0.010824882680581883,
                        0.03408427745376818,
                        0.078321263173476,
                        0.03113003470102267,
                        0.051170431469576484,
                        0.056669051415346394,
                        0.05650546731722198,
                        0.0778220430396813
                    ],
                    [
                        0.03307443347422281,
                        0.05821103697115269,
                        0.08818928627523516,
                        0.06961729682533248,
                        0.028515097706695094,
                        0.06773729142292022,
                        0.03717414127867371,
                        0.027845317066444154,
                        0.045406411993504536,
                        0.09022456356725417
                    ],
                    [
                        0.02746117999292588,
                        0.08170579686946296,
                        0.07978636737127062,
                        0.0378725476852438,
                        0.015187877767385083,
                        0.06108238230925658,
                        0.01794445709842102,
                        0.0639039153931024,
                        0.01561207888030608,
                        0.0920986904878226
                    ],
                    [
                        0.07927685422843005,
                        0.07284971683794936,
                        0.013006466166598375,
                        0.06812119564051786,
                        0.0451675343039277,
                        0.039260654240397944,
                        0.002142499284219346,
                        0.04290321910030527,
                        0.08085115244752296,
                        0.07125059830262813
                    ],
                    [
                        0.016535324350194835,
                        0.0722326163162224,
                        0.07328359382751778,
                        0.010578278671618547,
                        0.03876839039922475,
                        0.06883811567255636,
                        0.01605023597921377,
                        0.06352528322475459,
                        0.09153794259978658,
                        0.01338661292375929
                    ],
                    [
                        0.07765816953748621,
                        0.06639374825255127,
                        0.07533402472509389,
                        0.05216366532481706,
                        0.015870527701689865,
                        0.06793513504536451,
                        0.07621064657054902,
                        0.036140437375832495,
                        0.0012485040498407152,
                        0.03495797136357417
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    10
                ]
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "10"
                ],
                "bounds": [
                    "10.0",
                    "10.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "biomass": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "biomass": [
                        "0.0",
                        "-0.1"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    10
                ],
                "_data": "positive_float"
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            10
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}