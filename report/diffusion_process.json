{
    "state": {
        "global_time": "0.0",
        "fields": {
            "glucose": {
                "list": [
                    [
                        7.921605872956226,
                        1.4667366039184149,
                        8.237207352328346,
                        9.578808513508905,
                        12.63703579229274
                    ],
                    [
                        3.71328812552997,
                        19.09991195185394,
                        11.545004381263777,
                        4.099709111626739,
                        0.7599855509369502
                    ],
                    [
                        4.874108570812483,
                        15.987096980921699,
                        13.825090690326912,
                        11.425124245521065,
                        12.694747968440003
                    ],
                    [
                        0.3473312124893857,
                        13.978799479858557,
                        17.023847308091725,
                        18.28224793123782,
                        15.090105509837775
                    ],
                    [
                        13.81176481609325,
                        4.399944895677164,
                        17.184325746863596,
                        9.972579603020105,
                        8.504038769862916
                    ],
                    [
                        1.2353067042137855,
                        14.113743273795624,
                        4.79950150758742,
                        14.940867743843656,
                        15.271992508300261
                    ],
                    [
                        3.0624334507801754,
                        1.0010934428882767,
                        4.582732899777726,
                        0.5548467609563401,
                        7.149357344177343
                    ],
                    [
                        6.939813242682704,
                        13.685095560692613,
                        16.636909982498594,
                        12.66051305463666,
                        17.13721396121763
                    ],
                    [
                        13.944691141635735,
                        11.795316588307577,
                        1.6489450936129058,
                        17.266719193919357,
                        5.579615056916873
                    ],
                    [
                        4.499115399906839,
                        6.218230020681204,
                        15.003921234159288,
                        0.8981452524933675,
                        4.703796318264752
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    5
                ]
            },
            "acetate": {
                "list": [
                    [
                        0.006015915636775586,
                        0.00018335195630206914,
                        0.004258676849649403,
                        0.001624535035588266,
                        0.00418846859270324
                    ],
                    [
                        0.008255987900545549,
                        0.0038270906067713775,
                        0.004642812810209554,
                        0.0014232126162772253,
                        0.004667365673960307
                    ],
                    [
                        0.002078346766765422,
                        0.009255928141570564,
                        0.006959025410721527,
                        0.000694417148611014,
                        0.006291175646534562
                    ],
                    [
                        0.005620931648075348,
                        0.003339097286295524,
                        0.0039550012590198955,
                        0.0003160829745358329,
                        0.009642122307710152
                    ],
                    [
                        0.0031916550243600316,
                        0.008481172649353153,
                        0.0021889620494233886,
                        0.005425000419508684,
                        0.009988725922597948
                    ],
                    [
                        0.0007172401302800791,
                        0.00229709239927253,
                        0.009857082574111732,
                        9.315631451735196e-05,
                        0.001443376221624897
                    ],
                    [
                        0.002246150090750183,
                        0.008313230490661856,
                        0.005442778925025138,
                        0.0013370137585661723,
                        0.006080355913244188
                    ],
                    [
                        0.004345220151489071,
                        0.00784375656266541,
                        0.005632872527484018,
                        0.0002208568431602187,
                        0.003415596405029725
                    ],
                    [
                        0.00911036231775643,
                        0.0069876004830081795,
                        0.00031453157218501947,
                        0.0021383264389277334,
                        0.0022404799676853083
                    ],
                    [
                        0.005632960625919574,
                        0.008431346033182668,
                        0.007368303271918456,
                        0.008242839831652707,
                        0.008398613042331832
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    5
                ]
            },
            "biomass": {
                "list": [
                    [
                        0.023591867054279292,
                        0.014498347956462578,
                        0.07351358752261125,
                        0.035789077777130855,
                        0.06275429719680586
                    ],
                    [
                        0.03254870961912766,
                        0.09365224409894124,
                        0.07290217366763901,
                        0.027241072949124825,
                        0.03077977282643637
                    ],
                    [
                        0.033288684164744224,
                        0.058874773953744554,
                        0.006092922872244145,
                        0.004766787232804415,
                        0.0290015163286099
                    ],
                    [
                        0.052266405809337974,
                        0.05452670623736954,
                        0.007286950072215914,
                        0.010532070220349066,
                        0.0584403995255881
                    ],
                    [
                        0.0001995287105987176,
                        0.0287647761940648,
                        0.01664611603468228,
                        0.031869336631567984,
                        0.013149340034189928
                    ],
                    [
                        0.009839928767115303,
                        0.055627359752723954,
                        0.09301052110506806,
                        0.02454362161868038,
                        0.08607485453942916
                    ],
                    [
                        0.06602519920656073,
                        0.08951142862130859,
                        0.06625615446717015,
                        0.09855914858436989,
                        0.02328550939384906
                    ],
                    [
                        0.09791458137442158,
                        0.014156882376410097,
                        0.042029605242415814,
                        0.06164910023709724,
                        0.07744135054401435
                    ],
                    [
                        0.08937548445315278,
                        0.08563615702012516,
                        0.025624868255858746,
                        0.09489015988194759,
                        0.004513321410148963
                    ],
                    [
                        0.06977642872670656,
                        0.048684713055691047,
                        0.07709431184955667,
                        0.048191300728527744,
                        0.03349870490384094
                    ]
                ],
                "data": "float",
                "shape": [
                    10,
                    5
                ]
            }
        },
        "diffusion": {
            "inputs": {
                "fields": [
                    "fields"
                ]
            },
            "outputs": {
                "fields": [
                    "fields"
                ]
            },
            "interval": 1.0,
            "address": "local:DiffusionAdvection",
            "config": {
                "n_bins": [
                    "10",
                    "5"
                ],
                "bounds": [
                    "10.0",
                    "5.0"
                ],
                "default_diffusion_rate": "0.1",
                "default_diffusion_dt": "0.1",
                "diffusion_coeffs": {
                    "glucose": "0.1",
                    "acetate": "0.1",
                    "biomass": "0.1"
                },
                "advection_coeffs": {
                    "glucose": [
                        "0.0",
                        "0.0"
                    ],
                    "acetate": [
                        "0.0",
                        "0.0"
                    ],
                    "biomass": [
                        "0.0",
                        "-0.1"
                    ]
                }
            },
            "shared": null
        },
        "emitter": {
            "inputs": {
                "global_time": [
                    "global_time"
                ],
                "fields": [
                    "fields"
                ],
                "particles": [
                    "particles"
                ]
            },
            "outputs": null,
            "address": "local:ram-emitter",
            "config": {
                "emit": {
                    "global_time": "any",
                    "fields": "any",
                    "particles": "any"
                }
            }
        },
        "particles": {}
    },
    "composition": {
        "global_time": {
            "_type": "float",
            "_check": "check_float",
            "_apply": "accumulate",
            "_serialize": "to_string",
            "_description": "64-bit floating point precision number",
            "_default": 0.0,
            "_deserialize": "deserialize_float",
            "_divide": "divide_float",
            "_dataclass": "dataclass_float",
            "_inherit": [
                "number"
            ]
        },
        "fields": {
            "_type": "map",
            "_default": {},
            "_generate": "generate_map",
            "_apply": "apply_map",
            "_serialize": "serialize_map",
            "_deserialize": "deserialize_map",
            "_resolve": "resolve_map",
            "_dataclass": "dataclass_map",
            "_check": "check_map",
            "_slice": "slice_map",
            "_fold": "fold_map",
            "_divide": "divide_map",
            "_sort": "sort_map",
            "_type_parameters": [
                "value"
            ],
            "_description": "flat mapping from keys of strings to values of any type",
            "_value": {
                "_type": "positive_array",
                "_default": "default_array",
                "_check": "check_array",
                "_slice": "slice_array",
                "_apply": "apply_non_negative_array",
                "_serialize": "serialize_array",
                "_deserialize": "deserialize_array",
                "_dataclass": "dataclass_array",
                "_resolve": "resolve_array",
                "_bind": "bind_array",
                "_type_parameters": [
                    "shape",
                    "data"
                ],
                "_description": "an array of arbitrary dimension",
                "_inherit": [
                    "array"
                ],
                "_shape": [
                    10,
                    5
                ],
                "_data": "positive_float"
            }
        },
        "diffusion": {
            "_type": "process",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_process",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "positive_array",
                        "_shape": [
                            10,
                            5
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_outputs": {
                "fields": {
                    "_type": "map",
                    "_value": {
                        "_type": "array",
                        "_shape": [
                            10,
                            5
                        ],
                        "_data": "positive_float"
                    }
                }
            },
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "interval": {
                "_type": "interval",
                "_check": "check_float",
                "_apply": "set",
                "_serialize": "to_string",
                "_description": "64-bit floating point precision number",
                "_default": "1.0",
                "_deserialize": "deserialize_float",
                "_divide": "divide_float",
                "_dataclass": "dataclass_float",
                "_inherit": [
                    "float"
                ]
            },
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "shared": {
                "_type": "map",
                "_default": {},
                "_generate": "generate_map",
                "_apply": "apply_map",
                "_serialize": "serialize_map",
                "_deserialize": "deserialize_map",
                "_resolve": "resolve_map",
                "_dataclass": "dataclass_map",
                "_check": "check_map",
                "_slice": "slice_map",
                "_fold": "fold_map",
                "_divide": "divide_map",
                "_sort": "sort_map",
                "_type_parameters": [
                    "value"
                ],
                "_description": "flat mapping from keys of strings to values of any type",
                "_value": {
                    "_type": "step",
                    "_default": "default_edge",
                    "_generate": "generate_edge",
                    "_apply": "apply_process",
                    "_serialize": "serialize_process",
                    "_deserialize": "deserialize_step",
                    "_dataclass": "dataclass_edge",
                    "_check": "check_process",
                    "_slice": "slice_edge",
                    "_type_parameters": [
                        "inputs",
                        "outputs"
                    ],
                    "_description": "",
                    "inputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "outputs": {
                        "_type": "wires",
                        "_default": "default_tree",
                        "_generate": "generate_tree",
                        "_check": "check_tree",
                        "_slice": "slice_tree",
                        "_apply": "apply_tree",
                        "_serialize": "serialize_tree",
                        "_deserialize": "deserialize_tree",
                        "_dataclass": "dataclass_tree",
                        "_fold": "fold_tree",
                        "_divide": "divide_tree",
                        "_resolve": "resolve_tree",
                        "_type_parameters": [
                            "leaf"
                        ],
                        "_description": "mapping from str to some type in a potentially nested form",
                        "_leaf": {
                            "_type": "path",
                            "_default": [],
                            "_check": "check_list",
                            "_slice": "slice_list",
                            "_apply": "apply_path",
                            "_serialize": "serialize_list",
                            "_deserialize": "deserialize_list",
                            "_dataclass": "dataclass_list",
                            "_fold": "fold_list",
                            "_divide": "divide_list",
                            "_type_parameters": [
                                "element"
                            ],
                            "_description": "general list type (or sublists)",
                            "_element": {
                                "_type": "mark",
                                "_apply": "apply_mark",
                                "_check": "check_mark",
                                "_deserialize": "deserialize_mark",
                                "_resolve": "resolve_mark"
                            },
                            "_inherit": [
                                "list[mark]"
                            ]
                        },
                        "_inherit": [
                            "tree[path]"
                        ]
                    },
                    "_graphviz": "graphviz_edge",
                    "_inherit": [
                        "edge"
                    ],
                    "_fold": "fold_visit",
                    "_divide": "divide_process",
                    "address": {
                        "_type": "protocol",
                        "_default": "",
                        "_check": "check_string",
                        "_apply": "replace",
                        "_serialize": "serialize_string",
                        "_deserialize": "deserialize_string",
                        "_dataclass": "dataclass_string",
                        "_description": "64-bit integer",
                        "_inherit": [
                            "string"
                        ]
                    },
                    "config": {
                        "_type": "quote",
                        "_deserialize": "deserialize_quote",
                        "_default": "default_quote",
                        "_generate": "generate_quote",
                        "_sort": "sort_quote",
                        "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                        "_graphviz": "graphviz_none"
                    }
                }
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "emitter": {
            "_type": "step",
            "_default": "default_edge",
            "_generate": "generate_edge",
            "_apply": "apply_process",
            "_serialize": "serialize_process",
            "_deserialize": "deserialize_step",
            "_dataclass": "dataclass_edge",
            "_check": "check_process",
            "_slice": "slice_edge",
            "_inputs": {
                "global_time": "any",
                "fields": "any",
                "particles": "any"
            },
            "_outputs": null,
            "_description": "",
            "inputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "outputs": {
                "_type": "wires",
                "_default": "default_tree",
                "_generate": "generate_tree",
                "_check": "check_tree",
                "_slice": "slice_tree",
                "_apply": "apply_tree",
                "_serialize": "serialize_tree",
                "_deserialize": "deserialize_tree",
                "_dataclass": "dataclass_tree",
                "_fold": "fold_tree",
                "_divide": "divide_tree",
                "_resolve": "resolve_tree",
                "_type_parameters": [
                    "leaf"
                ],
                "_description": "mapping from str to some type in a potentially nested form",
                "_leaf": {
                    "_type": "path",
                    "_default": [],
                    "_check": "check_list",
                    "_slice": "slice_list",
                    "_apply": "apply_path",
                    "_serialize": "serialize_list",
                    "_deserialize": "deserialize_list",
                    "_dataclass": "dataclass_list",
                    "_fold": "fold_list",
                    "_divide": "divide_list",
                    "_type_parameters": [
                        "element"
                    ],
                    "_description": "general list type (or sublists)",
                    "_element": {
                        "_type": "mark",
                        "_apply": "apply_mark",
                        "_check": "check_mark",
                        "_deserialize": "deserialize_mark",
                        "_resolve": "resolve_mark"
                    },
                    "_inherit": [
                        "list[mark]"
                    ]
                },
                "_inherit": [
                    "tree[path]"
                ]
            },
            "_graphviz": "graphviz_edge",
            "_inherit": [
                "edge"
            ],
            "_fold": "fold_visit",
            "_divide": "divide_process",
            "address": {
                "_type": "protocol",
                "_default": "",
                "_check": "check_string",
                "_apply": "replace",
                "_serialize": "serialize_string",
                "_deserialize": "deserialize_string",
                "_dataclass": "dataclass_string",
                "_description": "64-bit integer",
                "_inherit": [
                    "string"
                ]
            },
            "config": {
                "_type": "quote",
                "_deserialize": "deserialize_quote",
                "_default": "default_quote",
                "_generate": "generate_quote",
                "_sort": "sort_quote",
                "_description": "protect a schema from generation, ie in the config for a nested composite which has type information we only want to evaluate inside of the composite",
                "_graphviz": "graphviz_none"
            },
            "instance": {
                "_type": "any",
                "_default": "default_any",
                "_slice": "slice_any",
                "_apply": "apply_any",
                "_check": "check_any",
                "_sort": "sort_any",
                "_generate": "generate_any",
                "_serialize": "serialize_any",
                "_deserialize": "deserialize_any",
                "_dataclass": "dataclass_any",
                "_resolve": "resolve_any",
                "_fold": "fold_any",
                "_bind": "bind_any",
                "_divide": "divide_any",
                "_graphviz": "graphviz_any"
            }
        },
        "particles": {
            "_type": "any",
            "_default": "default_any",
            "_slice": "slice_any",
            "_apply": "apply_any",
            "_check": "check_any",
            "_sort": "sort_any",
            "_generate": "generate_any",
            "_serialize": "serialize_any",
            "_deserialize": "deserialize_any",
            "_dataclass": "dataclass_any",
            "_resolve": "resolve_any",
            "_fold": "fold_any",
            "_bind": "bind_any",
            "_divide": "divide_any",
            "_graphviz": "graphviz_any"
        }
    }
}